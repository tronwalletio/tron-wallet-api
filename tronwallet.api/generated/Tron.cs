// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/Tron.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protocol {

  /// <summary>Holder for reflection information generated from core/Tron.proto</summary>
  public static partial class TronReflection {

    #region Descriptor
    /// <summary>File descriptor for core/Tron.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TronReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9jb3JlL1Ryb24ucHJvdG8SCHByb3RvY29sGixwcm90b2J1Zi0zLjUuMS9z",
            "cmMvZ29vZ2xlL3Byb3RvYnVmL2FueS5wcm90bxoTY29yZS9EaXNjb3Zlci5w",
            "cm90byIqCglBY2NvdW50SWQSDAoEbmFtZRgBIAEoDBIPCgdhZGRyZXNzGAIg",
            "ASgMIjAKBFZvdGUSFAoMdm90ZV9hZGRyZXNzGAEgASgMEhIKCnZvdGVfY291",
            "bnQYAiABKAMi8AMKB0FjY291bnQSFAoMYWNjb3VudF9uYW1lGAEgASgMEiMK",
            "BHR5cGUYAiABKA4yFS5wcm90b2NvbC5BY2NvdW50VHlwZRIPCgdhZGRyZXNz",
            "GAMgASgMEg8KB2JhbGFuY2UYBCABKAMSHQoFdm90ZXMYBSADKAsyDi5wcm90",
            "b2NvbC5Wb3RlEisKBWFzc2V0GAYgAygLMhwucHJvdG9jb2wuQWNjb3VudC5B",
            "c3NldEVudHJ5EigKBmZyb3plbhgHIAMoCzIYLnByb3RvY29sLkFjY291bnQu",
            "RnJvemVuEhEKCWJhbmR3aWR0aBgIIAEoAxITCgtjcmVhdGVfdGltZRgJIAEo",
            "AxIcChRsYXRlc3Rfb3ByYXRpb25fdGltZRgKIAEoAxIRCglhbGxvd2FuY2UY",
            "CyABKAMSHAoUbGF0ZXN0X3dpdGhkcmF3X3RpbWUYDCABKAMSDAoEY29kZRgN",
            "IAEoDBISCgppc193aXRuZXNzGA4gASgIEhQKDGlzX2NvbW1pdHRlZRgPIAEo",
            "CBo1CgZGcm96ZW4SFgoOZnJvemVuX2JhbGFuY2UYASABKAMSEwoLZXhwaXJl",
            "X3RpbWUYAiABKAMaLAoKQXNzZXRFbnRyeRILCgNrZXkYASABKAkSDQoFdmFs",
            "dWUYAiABKAM6AjgBIkoKCWFjdXRocml0eRIkCgdhY2NvdW50GAEgASgLMhMu",
            "cHJvdG9jb2wuQWNjb3VudElkEhcKD3Blcm1pc3Npb25fbmFtZRgCIAEoDCIx",
            "CglwZXJtaXNpb24SJAoHYWNjb3VudBgBIAEoCzITLnByb3RvY29sLkFjY291",
            "bnRJZCK1AQoHV2l0bmVzcxIPCgdhZGRyZXNzGAEgASgMEhEKCXZvdGVDb3Vu",
            "dBgCIAEoAxIOCgZwdWJLZXkYAyABKAwSCwoDdXJsGAQgASgJEhUKDXRvdGFs",
            "UHJvZHVjZWQYBSABKAMSEwoLdG90YWxNaXNzZWQYBiABKAMSFgoObGF0ZXN0",
            "QmxvY2tOdW0YByABKAMSFQoNbGF0ZXN0U2xvdE51bRgIIAEoAxIOCgZpc0pv",
            "YnMYCSABKAgiXgoFVm90ZXMSDwoHYWRkcmVzcxgBIAEoDBIhCglvbGRfdm90",
            "ZXMYAiADKAsyDi5wcm90b2NvbC5Wb3RlEiEKCW5ld192b3RlcxgDIAMoCzIO",
            "LnByb3RvY29sLlZvdGUiLQoIVFhPdXRwdXQSDQoFdmFsdWUYASABKAMSEgoK",
            "cHViS2V5SGFzaBgCIAEoDCJ4CgdUWElucHV0EicKCHJhd19kYXRhGAEgASgL",
            "MhUucHJvdG9jb2wuVFhJbnB1dC5yYXcSEQoJc2lnbmF0dXJlGAQgASgMGjEK",
            "A3JhdxIMCgR0eElEGAEgASgMEgwKBHZvdXQYAiABKAMSDgoGcHViS2V5GAMg",
            "ASgMIjAKCVRYT3V0cHV0cxIjCgdvdXRwdXRzGAEgAygLMhIucHJvdG9jb2wu",
            "VFhPdXRwdXQi+gcKC1RyYW5zYWN0aW9uEisKCHJhd19kYXRhGAEgASgLMhku",
            "cHJvdG9jb2wuVHJhbnNhY3Rpb24ucmF3EhEKCXNpZ25hdHVyZRgCIAMoDBIp",
            "CgNyZXQYBSADKAsyHC5wcm90b2NvbC5UcmFuc2FjdGlvbi5SZXN1bHQarAQK",
            "CENvbnRyYWN0EjkKBHR5cGUYASABKA4yKy5wcm90b2NvbC5UcmFuc2FjdGlv",
            "bi5Db250cmFjdC5Db250cmFjdFR5cGUSJwoJcGFyYW1ldGVyGAIgASgLMhQu",
            "Z29vZ2xlLnByb3RvYnVmLkFueRIQCghwcm92aWRlchgDIAEoDBIUCgxDb250",
            "cmFjdE5hbWUYBCABKAwikwMKDENvbnRyYWN0VHlwZRIZChVBY2NvdW50Q3Jl",
            "YXRlQ29udHJhY3QQABIUChBUcmFuc2ZlckNvbnRyYWN0EAESGQoVVHJhbnNm",
            "ZXJBc3NldENvbnRyYWN0EAISFQoRVm90ZUFzc2V0Q29udHJhY3QQAxIXChNW",
            "b3RlV2l0bmVzc0NvbnRyYWN0EAQSGQoVV2l0bmVzc0NyZWF0ZUNvbnRyYWN0",
            "EAUSFgoSQXNzZXRJc3N1ZUNvbnRyYWN0EAYSEgoORGVwbG95Q29udHJhY3QQ",
            "BxIZChVXaXRuZXNzVXBkYXRlQ29udHJhY3QQCBIhCh1QYXJ0aWNpcGF0ZUFz",
            "c2V0SXNzdWVDb250cmFjdBAJEhkKFUFjY291bnRVcGRhdGVDb250cmFjdBAK",
            "EhkKFUZyZWV6ZUJhbGFuY2VDb250cmFjdBALEhsKF1VuZnJlZXplQmFsYW5j",
            "ZUNvbnRyYWN0EAwSGwoXV2l0aGRyYXdCYWxhbmNlQ29udHJhY3QQDRISCg5D",
            "dXN0b21Db250cmFjdBAUGmUKBlJlc3VsdBILCgNmZWUYASABKAMSLgoDcmV0",
            "GAIgASgOMiEucHJvdG9jb2wuVHJhbnNhY3Rpb24uUmVzdWx0LmNvZGUiHgoE",
            "Y29kZRIKCgZTVUNFU1MQABIKCgZGQUlMRUQQARrpAQoDcmF3EhcKD3JlZl9i",
            "bG9ja19ieXRlcxgBIAEoDBIVCg1yZWZfYmxvY2tfbnVtGAMgASgDEhYKDnJl",
            "Zl9ibG9ja19oYXNoGAQgASgMEhIKCmV4cGlyYXRpb24YCCABKAMSIgoFYXV0",
            "aHMYCSADKAsyEy5wcm90b2NvbC5hY3V0aHJpdHkSDAoEZGF0YRgKIAEoDBIw",
            "Cghjb250cmFjdBgLIAMoCzIeLnByb3RvY29sLlRyYW5zYWN0aW9uLkNvbnRy",
            "YWN0Eg8KB3NjcmlwdHMYDCABKAwSEQoJdGltZXN0YW1wGA4gASgDItQBCgtC",
            "bG9ja0hlYWRlchIrCghyYXdfZGF0YRgBIAEoCzIZLnByb3RvY29sLkJsb2Nr",
            "SGVhZGVyLnJhdxIZChF3aXRuZXNzX3NpZ25hdHVyZRgCIAEoDBp9CgNyYXcS",
            "EQoJdGltZXN0YW1wGAEgASgDEhIKCnR4VHJpZVJvb3QYAiABKAwSEgoKcGFy",
            "ZW50SGFzaBgDIAEoDBIOCgZudW1iZXIYByABKAMSEgoKd2l0bmVzc19pZBgI",
            "IAEoAxIXCg93aXRuZXNzX2FkZHJlc3MYCSABKAwiYQoFQmxvY2sSKwoMdHJh",
            "bnNhY3Rpb25zGAEgAygLMhUucHJvdG9jb2wuVHJhbnNhY3Rpb24SKwoMYmxv",
            "Y2tfaGVhZGVyGAIgASgLMhUucHJvdG9jb2wuQmxvY2tIZWFkZXIifAoOQ2hh",
            "aW5JbnZlbnRvcnkSLQoDaWRzGAEgAygLMiAucHJvdG9jb2wuQ2hhaW5JbnZl",
            "bnRvcnkuQmxvY2tJZBISCgpyZW1haW5fbnVtGAIgASgDGicKB0Jsb2NrSWQS",
            "DAoEaGFzaBgBIAEoDBIOCgZudW1iZXIYAiABKAMivwEKDkJsb2NrSW52ZW50",
            "b3J5Ei0KA2lkcxgBIAMoCzIgLnByb3RvY29sLkJsb2NrSW52ZW50b3J5LkJs",
            "b2NrSWQSKwoEdHlwZRgCIAEoDjIdLnByb3RvY29sLkJsb2NrSW52ZW50b3J5",
            "LlR5cGUaJwoHQmxvY2tJZBIMCgRoYXNoGAEgASgMEg4KBm51bWJlchgCIAEo",
            "AyIoCgRUeXBlEggKBFNZTkMQABILCgdBRFZUSVNFEAESCQoFRkVUQ0gQAiJu",
            "CglJbnZlbnRvcnkSLwoEdHlwZRgBIAEoDjIhLnByb3RvY29sLkludmVudG9y",
            "eS5JbnZlbnRvcnlUeXBlEgsKA2lkcxgCIAMoDCIjCg1JbnZlbnRvcnlUeXBl",
            "EgcKA1RSWBAAEgkKBUJMT0NLEAEi5QEKBUl0ZW1zEiYKBHR5cGUYASABKA4y",
            "GC5wcm90b2NvbC5JdGVtcy5JdGVtVHlwZRIfCgZibG9ja3MYAiADKAsyDy5w",
            "cm90b2NvbC5CbG9jaxIsCg1ibG9ja19oZWFkZXJzGAMgAygLMhUucHJvdG9j",
            "b2wuQmxvY2tIZWFkZXISKwoMdHJhbnNhY3Rpb25zGAQgAygLMhUucHJvdG9j",
            "b2wuVHJhbnNhY3Rpb24iOAoISXRlbVR5cGUSBwoDRVJSEAASBwoDVFJYEAES",
            "CQoFQkxPQ0sQAhIPCgtCTE9DS0hFQURFUhADIjQKEUR5bmFtaWNQcm9wZXJ0",
            "aWVzEh8KF2xhc3Rfc29saWRpdHlfYmxvY2tfbnVtGAEgASgDIjkKEURpc2Nv",
            "bm5lY3RNZXNzYWdlEiQKBnJlYXNvbhgBIAEoDjIULnByb3RvY29sLlJlYXNv",
            "bkNvZGUiVAoMSGVsbG9NZXNzYWdlEiAKBGZyb20YASABKAsyEi5wcm90b2Nv",
            "bC5FbmRwb2ludBIPCgd2ZXJzaW9uGAIgASgFEhEKCXRpbWVzdGFtcBgDIAEo",
            "Ayo3CgtBY2NvdW50VHlwZRIKCgZOb3JtYWwQABIOCgpBc3NldElzc3VlEAES",
            "DAoIQ29udHJhY3QQAiqmAwoKUmVhc29uQ29kZRINCglSRVFVRVNURUQQABIQ",
            "CgxCQURfUFJPVE9DT0wQAhISCg5UT09fTUFOWV9QRUVSUxAEEhIKDkRVUExJ",
            "Q0FURV9QRUVSEAUSGQoVSU5DT01QQVRJQkxFX1BST1RPQ09MEAYSEQoNTlVM",
            "TF9JREVOVElUWRAHEhAKDFBFRVJfUVVJVElORxAIEhcKE1VORVhQRUNURURf",
            "SURFTlRJVFkQCRISCg5MT0NBTF9JREVOVElUWRAKEhAKDFBJTkdfVElNRU9V",
            "VBALEg8KC1VTRVJfUkVBU09OEBASCQoFUkVTRVQQERINCglTWU5DX0ZBSUwQ",
            "EhIOCgpGRVRDSF9GQUlMEBMSCgoGQkFEX1RYEBQSDQoJQkFEX0JMT0NLEBUS",
            "CgoGRk9SS0VEEBYSDgoKVU5MSU5LQUJMRRAXEhgKFElOQ09NUEFUSUJMRV9W",
            "RVJTSU9OEBgSFgoSSU5DT01QQVRJQkxFX0NIQUlOEBkSDAoIVElNRV9PVVQQ",
            "IBIQCgxDT05ORUNUX0ZBSUwQIRIMCgdVTktOT1dOEP8BQkYKD29yZy50cm9u",
            "LnByb3Rvc0IIUHJvdG9jb2xaKWdpdGh1Yi5jb20vdHJvbnByb3RvY29sL2dy",
            "cGMtZ2F0ZXdheS9jb3JlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Protocol.DiscoverReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Protocol.AccountType), typeof(global::Protocol.ReasonCode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.AccountId), global::Protocol.AccountId.Parser, new[]{ "Name", "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Vote), global::Protocol.Vote.Parser, new[]{ "VoteAddress", "VoteCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Account), global::Protocol.Account.Parser, new[]{ "AccountName", "Type", "Address", "Balance", "Votes", "Asset", "Frozen", "Bandwidth", "CreateTime", "LatestOprationTime", "Allowance", "LatestWithdrawTime", "Code", "IsWitness", "IsCommittee" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Account.Types.Frozen), global::Protocol.Account.Types.Frozen.Parser, new[]{ "FrozenBalance", "ExpireTime" }, null, null, null),
            null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.acuthrity), global::Protocol.acuthrity.Parser, new[]{ "Account", "PermissionName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.permision), global::Protocol.permision.Parser, new[]{ "Account" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Witness), global::Protocol.Witness.Parser, new[]{ "Address", "VoteCount", "PubKey", "Url", "TotalProduced", "TotalMissed", "LatestBlockNum", "LatestSlotNum", "IsJobs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Votes), global::Protocol.Votes.Parser, new[]{ "Address", "OldVotes", "NewVotes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TXOutput), global::Protocol.TXOutput.Parser, new[]{ "Value", "PubKeyHash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TXInput), global::Protocol.TXInput.Parser, new[]{ "RawData", "Signature" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TXInput.Types.raw), global::Protocol.TXInput.Types.raw.Parser, new[]{ "TxID", "Vout", "PubKey" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TXOutputs), global::Protocol.TXOutputs.Parser, new[]{ "Outputs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Transaction), global::Protocol.Transaction.Parser, new[]{ "RawData", "Signature", "Ret" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Transaction.Types.Contract), global::Protocol.Transaction.Types.Contract.Parser, new[]{ "Type", "Parameter", "Provider", "ContractName" }, null, new[]{ typeof(global::Protocol.Transaction.Types.Contract.Types.ContractType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Transaction.Types.Result), global::Protocol.Transaction.Types.Result.Parser, new[]{ "Fee", "Ret" }, null, new[]{ typeof(global::Protocol.Transaction.Types.Result.Types.code) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Transaction.Types.raw), global::Protocol.Transaction.Types.raw.Parser, new[]{ "RefBlockBytes", "RefBlockNum", "RefBlockHash", "Expiration", "Auths", "Data", "Contract", "Scripts", "Timestamp" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BlockHeader), global::Protocol.BlockHeader.Parser, new[]{ "RawData", "WitnessSignature" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BlockHeader.Types.raw), global::Protocol.BlockHeader.Types.raw.Parser, new[]{ "Timestamp", "TxTrieRoot", "ParentHash", "Number", "WitnessId", "WitnessAddress" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Block), global::Protocol.Block.Parser, new[]{ "Transactions", "BlockHeader" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ChainInventory), global::Protocol.ChainInventory.Parser, new[]{ "Ids", "RemainNum" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.ChainInventory.Types.BlockId), global::Protocol.ChainInventory.Types.BlockId.Parser, new[]{ "Hash", "Number" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BlockInventory), global::Protocol.BlockInventory.Parser, new[]{ "Ids", "Type" }, null, new[]{ typeof(global::Protocol.BlockInventory.Types.Type) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BlockInventory.Types.BlockId), global::Protocol.BlockInventory.Types.BlockId.Parser, new[]{ "Hash", "Number" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Inventory), global::Protocol.Inventory.Parser, new[]{ "Type", "Ids" }, null, new[]{ typeof(global::Protocol.Inventory.Types.InventoryType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Items), global::Protocol.Items.Parser, new[]{ "Type", "Blocks", "BlockHeaders", "Transactions" }, null, new[]{ typeof(global::Protocol.Items.Types.ItemType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.DynamicProperties), global::Protocol.DynamicProperties.Parser, new[]{ "LastSolidityBlockNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.DisconnectMessage), global::Protocol.DisconnectMessage.Parser, new[]{ "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.HelloMessage), global::Protocol.HelloMessage.Parser, new[]{ "From", "Version", "Timestamp" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum AccountType {
    [pbr::OriginalName("Normal")] Normal = 0,
    [pbr::OriginalName("AssetIssue")] AssetIssue = 1,
    [pbr::OriginalName("Contract")] Contract = 2,
  }

  public enum ReasonCode {
    [pbr::OriginalName("REQUESTED")] Requested = 0,
    [pbr::OriginalName("BAD_PROTOCOL")] BadProtocol = 2,
    [pbr::OriginalName("TOO_MANY_PEERS")] TooManyPeers = 4,
    [pbr::OriginalName("DUPLICATE_PEER")] DuplicatePeer = 5,
    [pbr::OriginalName("INCOMPATIBLE_PROTOCOL")] IncompatibleProtocol = 6,
    [pbr::OriginalName("NULL_IDENTITY")] NullIdentity = 7,
    [pbr::OriginalName("PEER_QUITING")] PeerQuiting = 8,
    [pbr::OriginalName("UNEXPECTED_IDENTITY")] UnexpectedIdentity = 9,
    [pbr::OriginalName("LOCAL_IDENTITY")] LocalIdentity = 10,
    [pbr::OriginalName("PING_TIMEOUT")] PingTimeout = 11,
    [pbr::OriginalName("USER_REASON")] UserReason = 16,
    [pbr::OriginalName("RESET")] Reset = 17,
    [pbr::OriginalName("SYNC_FAIL")] SyncFail = 18,
    [pbr::OriginalName("FETCH_FAIL")] FetchFail = 19,
    [pbr::OriginalName("BAD_TX")] BadTx = 20,
    [pbr::OriginalName("BAD_BLOCK")] BadBlock = 21,
    [pbr::OriginalName("FORKED")] Forked = 22,
    [pbr::OriginalName("UNLINKABLE")] Unlinkable = 23,
    [pbr::OriginalName("INCOMPATIBLE_VERSION")] IncompatibleVersion = 24,
    [pbr::OriginalName("INCOMPATIBLE_CHAIN")] IncompatibleChain = 25,
    [pbr::OriginalName("TIME_OUT")] TimeOut = 32,
    [pbr::OriginalName("CONNECT_FAIL")] ConnectFail = 33,
    [pbr::OriginalName("UNKNOWN")] Unknown = 255,
  }

  #endregion

  #region Messages
  /// <summary>
  /// AccountId, (name, address) use name, (null, address) use address, (name, null) use name,
  /// </summary>
  public sealed partial class AccountId : pb::IMessage<AccountId> {
    private static readonly pb::MessageParser<AccountId> _parser = new pb::MessageParser<AccountId>(() => new AccountId());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountId(AccountId other) : this() {
      name_ = other.name_;
      address_ = other.address_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountId Clone() {
      return new AccountId(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 2;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Address != other.Address) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Name);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Address);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountId other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadBytes();
            break;
          }
          case 18: {
            Address = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// vote message
  /// </summary>
  public sealed partial class Vote : pb::IMessage<Vote> {
    private static readonly pb::MessageParser<Vote> _parser = new pb::MessageParser<Vote>(() => new Vote());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vote> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vote() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vote(Vote other) : this() {
      voteAddress_ = other.voteAddress_;
      voteCount_ = other.voteCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vote Clone() {
      return new Vote(this);
    }

    /// <summary>Field number for the "vote_address" field.</summary>
    public const int VoteAddressFieldNumber = 1;
    private pb::ByteString voteAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// the super rep address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString VoteAddress {
      get { return voteAddress_; }
      set {
        voteAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vote_count" field.</summary>
    public const int VoteCountFieldNumber = 2;
    private long voteCount_;
    /// <summary>
    /// the vote num to this super rep.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VoteCount {
      get { return voteCount_; }
      set {
        voteCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vote);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vote other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VoteAddress != other.VoteAddress) return false;
      if (VoteCount != other.VoteCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VoteAddress.Length != 0) hash ^= VoteAddress.GetHashCode();
      if (VoteCount != 0L) hash ^= VoteCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VoteAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(VoteAddress);
      }
      if (VoteCount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(VoteCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VoteAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(VoteAddress);
      }
      if (VoteCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VoteCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vote other) {
      if (other == null) {
        return;
      }
      if (other.VoteAddress.Length != 0) {
        VoteAddress = other.VoteAddress;
      }
      if (other.VoteCount != 0L) {
        VoteCount = other.VoteCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            VoteAddress = input.ReadBytes();
            break;
          }
          case 16: {
            VoteCount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Account
  /// </summary>
  public sealed partial class Account : pb::IMessage<Account> {
    private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Account> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account(Account other) : this() {
      accountName_ = other.accountName_;
      type_ = other.type_;
      address_ = other.address_;
      balance_ = other.balance_;
      votes_ = other.votes_.Clone();
      asset_ = other.asset_.Clone();
      frozen_ = other.frozen_.Clone();
      bandwidth_ = other.bandwidth_;
      createTime_ = other.createTime_;
      latestOprationTime_ = other.latestOprationTime_;
      allowance_ = other.allowance_;
      latestWithdrawTime_ = other.latestWithdrawTime_;
      code_ = other.code_;
      isWitness_ = other.isWitness_;
      isCommittee_ = other.isCommittee_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account Clone() {
      return new Account(this);
    }

    /// <summary>Field number for the "account_name" field.</summary>
    public const int AccountNameFieldNumber = 1;
    private pb::ByteString accountName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AccountName {
      get { return accountName_; }
      set {
        accountName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Protocol.AccountType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AccountType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 3;
    private pb::ByteString address_ = pb::ByteString.Empty;
    /// <summary>
    /// the create adress
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 4;
    private long balance_;
    /// <summary>
    /// the trx balance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Balance {
      get { return balance_; }
      set {
        balance_ = value;
      }
    }

    /// <summary>Field number for the "votes" field.</summary>
    public const int VotesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protocol.Vote> _repeated_votes_codec
        = pb::FieldCodec.ForMessage(42, global::Protocol.Vote.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Vote> votes_ = new pbc::RepeatedField<global::Protocol.Vote>();
    /// <summary>
    /// the votes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Vote> Votes {
      get { return votes_; }
    }

    /// <summary>Field number for the "asset" field.</summary>
    public const int AssetFieldNumber = 6;
    private static readonly pbc::MapField<string, long>.Codec _map_asset_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt64(16), 50);
    private readonly pbc::MapField<string, long> asset_ = new pbc::MapField<string, long>();
    /// <summary>
    /// the other asset owned by this account
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> Asset {
      get { return asset_; }
    }

    /// <summary>Field number for the "frozen" field.</summary>
    public const int FrozenFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Protocol.Account.Types.Frozen> _repeated_frozen_codec
        = pb::FieldCodec.ForMessage(58, global::Protocol.Account.Types.Frozen.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Account.Types.Frozen> frozen_ = new pbc::RepeatedField<global::Protocol.Account.Types.Frozen>();
    /// <summary>
    /// the frozen balance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Account.Types.Frozen> Frozen {
      get { return frozen_; }
    }

    /// <summary>Field number for the "bandwidth" field.</summary>
    public const int BandwidthFieldNumber = 8;
    private long bandwidth_;
    /// <summary>
    /// bandwidth, get from frozen
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Bandwidth {
      get { return bandwidth_; }
      set {
        bandwidth_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 9;
    private long createTime_;
    /// <summary>
    /// this account create time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "latest_opration_time" field.</summary>
    public const int LatestOprationTimeFieldNumber = 10;
    private long latestOprationTime_;
    /// <summary>
    /// this last opration time, including transfer, voting and so on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LatestOprationTime {
      get { return latestOprationTime_; }
      set {
        latestOprationTime_ = value;
      }
    }

    /// <summary>Field number for the "allowance" field.</summary>
    public const int AllowanceFieldNumber = 11;
    private long allowance_;
    /// <summary>
    /// witness block producing allowance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Allowance {
      get { return allowance_; }
      set {
        allowance_ = value;
      }
    }

    /// <summary>Field number for the "latest_withdraw_time" field.</summary>
    public const int LatestWithdrawTimeFieldNumber = 12;
    private long latestWithdrawTime_;
    /// <summary>
    /// last withdraw time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LatestWithdrawTime {
      get { return latestWithdrawTime_; }
      set {
        latestWithdrawTime_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 13;
    private pb::ByteString code_ = pb::ByteString.Empty;
    /// <summary>
    /// not used so far
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_witness" field.</summary>
    public const int IsWitnessFieldNumber = 14;
    private bool isWitness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWitness {
      get { return isWitness_; }
      set {
        isWitness_ = value;
      }
    }

    /// <summary>Field number for the "is_committee" field.</summary>
    public const int IsCommitteeFieldNumber = 15;
    private bool isCommittee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCommittee {
      get { return isCommittee_; }
      set {
        isCommittee_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Account);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Account other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountName != other.AccountName) return false;
      if (Type != other.Type) return false;
      if (Address != other.Address) return false;
      if (Balance != other.Balance) return false;
      if(!votes_.Equals(other.votes_)) return false;
      if (!Asset.Equals(other.Asset)) return false;
      if(!frozen_.Equals(other.frozen_)) return false;
      if (Bandwidth != other.Bandwidth) return false;
      if (CreateTime != other.CreateTime) return false;
      if (LatestOprationTime != other.LatestOprationTime) return false;
      if (Allowance != other.Allowance) return false;
      if (LatestWithdrawTime != other.LatestWithdrawTime) return false;
      if (Code != other.Code) return false;
      if (IsWitness != other.IsWitness) return false;
      if (IsCommittee != other.IsCommittee) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Balance != 0L) hash ^= Balance.GetHashCode();
      hash ^= votes_.GetHashCode();
      hash ^= Asset.GetHashCode();
      hash ^= frozen_.GetHashCode();
      if (Bandwidth != 0L) hash ^= Bandwidth.GetHashCode();
      if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
      if (LatestOprationTime != 0L) hash ^= LatestOprationTime.GetHashCode();
      if (Allowance != 0L) hash ^= Allowance.GetHashCode();
      if (LatestWithdrawTime != 0L) hash ^= LatestWithdrawTime.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (IsWitness != false) hash ^= IsWitness.GetHashCode();
      if (IsCommittee != false) hash ^= IsCommittee.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(AccountName);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Address);
      }
      if (Balance != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Balance);
      }
      votes_.WriteTo(output, _repeated_votes_codec);
      asset_.WriteTo(output, _map_asset_codec);
      frozen_.WriteTo(output, _repeated_frozen_codec);
      if (Bandwidth != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Bandwidth);
      }
      if (CreateTime != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(CreateTime);
      }
      if (LatestOprationTime != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(LatestOprationTime);
      }
      if (Allowance != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Allowance);
      }
      if (LatestWithdrawTime != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(LatestWithdrawTime);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(Code);
      }
      if (IsWitness != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsWitness);
      }
      if (IsCommittee != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsCommittee);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AccountName);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      if (Balance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Balance);
      }
      size += votes_.CalculateSize(_repeated_votes_codec);
      size += asset_.CalculateSize(_map_asset_codec);
      size += frozen_.CalculateSize(_repeated_frozen_codec);
      if (Bandwidth != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Bandwidth);
      }
      if (CreateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
      }
      if (LatestOprationTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LatestOprationTime);
      }
      if (Allowance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Allowance);
      }
      if (LatestWithdrawTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LatestWithdrawTime);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Code);
      }
      if (IsWitness != false) {
        size += 1 + 1;
      }
      if (IsCommittee != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Account other) {
      if (other == null) {
        return;
      }
      if (other.AccountName.Length != 0) {
        AccountName = other.AccountName;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Balance != 0L) {
        Balance = other.Balance;
      }
      votes_.Add(other.votes_);
      asset_.Add(other.asset_);
      frozen_.Add(other.frozen_);
      if (other.Bandwidth != 0L) {
        Bandwidth = other.Bandwidth;
      }
      if (other.CreateTime != 0L) {
        CreateTime = other.CreateTime;
      }
      if (other.LatestOprationTime != 0L) {
        LatestOprationTime = other.LatestOprationTime;
      }
      if (other.Allowance != 0L) {
        Allowance = other.Allowance;
      }
      if (other.LatestWithdrawTime != 0L) {
        LatestWithdrawTime = other.LatestWithdrawTime;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.IsWitness != false) {
        IsWitness = other.IsWitness;
      }
      if (other.IsCommittee != false) {
        IsCommittee = other.IsCommittee;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountName = input.ReadBytes();
            break;
          }
          case 16: {
            type_ = (global::Protocol.AccountType) input.ReadEnum();
            break;
          }
          case 26: {
            Address = input.ReadBytes();
            break;
          }
          case 32: {
            Balance = input.ReadInt64();
            break;
          }
          case 42: {
            votes_.AddEntriesFrom(input, _repeated_votes_codec);
            break;
          }
          case 50: {
            asset_.AddEntriesFrom(input, _map_asset_codec);
            break;
          }
          case 58: {
            frozen_.AddEntriesFrom(input, _repeated_frozen_codec);
            break;
          }
          case 64: {
            Bandwidth = input.ReadInt64();
            break;
          }
          case 72: {
            CreateTime = input.ReadInt64();
            break;
          }
          case 80: {
            LatestOprationTime = input.ReadInt64();
            break;
          }
          case 88: {
            Allowance = input.ReadInt64();
            break;
          }
          case 96: {
            LatestWithdrawTime = input.ReadInt64();
            break;
          }
          case 106: {
            Code = input.ReadBytes();
            break;
          }
          case 112: {
            IsWitness = input.ReadBool();
            break;
          }
          case 120: {
            IsCommittee = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Account message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// frozen balance
      /// </summary>
      public sealed partial class Frozen : pb::IMessage<Frozen> {
        private static readonly pb::MessageParser<Frozen> _parser = new pb::MessageParser<Frozen>(() => new Frozen());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Frozen> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.Account.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Frozen() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Frozen(Frozen other) : this() {
          frozenBalance_ = other.frozenBalance_;
          expireTime_ = other.expireTime_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Frozen Clone() {
          return new Frozen(this);
        }

        /// <summary>Field number for the "frozen_balance" field.</summary>
        public const int FrozenBalanceFieldNumber = 1;
        private long frozenBalance_;
        /// <summary>
        /// the frozen trx balance
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FrozenBalance {
          get { return frozenBalance_; }
          set {
            frozenBalance_ = value;
          }
        }

        /// <summary>Field number for the "expire_time" field.</summary>
        public const int ExpireTimeFieldNumber = 2;
        private long expireTime_;
        /// <summary>
        /// the expire time
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ExpireTime {
          get { return expireTime_; }
          set {
            expireTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Frozen);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Frozen other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FrozenBalance != other.FrozenBalance) return false;
          if (ExpireTime != other.ExpireTime) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FrozenBalance != 0L) hash ^= FrozenBalance.GetHashCode();
          if (ExpireTime != 0L) hash ^= ExpireTime.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FrozenBalance != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(FrozenBalance);
          }
          if (ExpireTime != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(ExpireTime);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FrozenBalance != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FrozenBalance);
          }
          if (ExpireTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireTime);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Frozen other) {
          if (other == null) {
            return;
          }
          if (other.FrozenBalance != 0L) {
            FrozenBalance = other.FrozenBalance;
          }
          if (other.ExpireTime != 0L) {
            ExpireTime = other.ExpireTime;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                FrozenBalance = input.ReadInt64();
                break;
              }
              case 16: {
                ExpireTime = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class acuthrity : pb::IMessage<acuthrity> {
    private static readonly pb::MessageParser<acuthrity> _parser = new pb::MessageParser<acuthrity>(() => new acuthrity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<acuthrity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public acuthrity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public acuthrity(acuthrity other) : this() {
      Account = other.account_ != null ? other.Account.Clone() : null;
      permissionName_ = other.permissionName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public acuthrity Clone() {
      return new acuthrity(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private global::Protocol.AccountId account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AccountId Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "permission_name" field.</summary>
    public const int PermissionNameFieldNumber = 2;
    private pb::ByteString permissionName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PermissionName {
      get { return permissionName_; }
      set {
        permissionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as acuthrity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(acuthrity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Account, other.Account)) return false;
      if (PermissionName != other.PermissionName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account_ != null) hash ^= Account.GetHashCode();
      if (PermissionName.Length != 0) hash ^= PermissionName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (PermissionName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PermissionName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (PermissionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PermissionName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(acuthrity other) {
      if (other == null) {
        return;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          account_ = new global::Protocol.AccountId();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.PermissionName.Length != 0) {
        PermissionName = other.PermissionName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (account_ == null) {
              account_ = new global::Protocol.AccountId();
            }
            input.ReadMessage(account_);
            break;
          }
          case 18: {
            PermissionName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class permision : pb::IMessage<permision> {
    private static readonly pb::MessageParser<permision> _parser = new pb::MessageParser<permision>(() => new permision());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<permision> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public permision() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public permision(permision other) : this() {
      Account = other.account_ != null ? other.Account.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public permision Clone() {
      return new permision(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private global::Protocol.AccountId account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.AccountId Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as permision);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(permision other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Account, other.Account)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account_ != null) hash ^= Account.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(permision other) {
      if (other == null) {
        return;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          account_ = new global::Protocol.AccountId();
        }
        Account.MergeFrom(other.Account);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (account_ == null) {
              account_ = new global::Protocol.AccountId();
            }
            input.ReadMessage(account_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Witness
  /// </summary>
  public sealed partial class Witness : pb::IMessage<Witness> {
    private static readonly pb::MessageParser<Witness> _parser = new pb::MessageParser<Witness>(() => new Witness());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Witness> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Witness() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Witness(Witness other) : this() {
      address_ = other.address_;
      voteCount_ = other.voteCount_;
      pubKey_ = other.pubKey_;
      url_ = other.url_;
      totalProduced_ = other.totalProduced_;
      totalMissed_ = other.totalMissed_;
      latestBlockNum_ = other.latestBlockNum_;
      latestSlotNum_ = other.latestSlotNum_;
      isJobs_ = other.isJobs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Witness Clone() {
      return new Witness(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "voteCount" field.</summary>
    public const int VoteCountFieldNumber = 2;
    private long voteCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VoteCount {
      get { return voteCount_; }
      set {
        voteCount_ = value;
      }
    }

    /// <summary>Field number for the "pubKey" field.</summary>
    public const int PubKeyFieldNumber = 3;
    private pb::ByteString pubKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PubKey {
      get { return pubKey_; }
      set {
        pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 4;
    private string url_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "totalProduced" field.</summary>
    public const int TotalProducedFieldNumber = 5;
    private long totalProduced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalProduced {
      get { return totalProduced_; }
      set {
        totalProduced_ = value;
      }
    }

    /// <summary>Field number for the "totalMissed" field.</summary>
    public const int TotalMissedFieldNumber = 6;
    private long totalMissed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalMissed {
      get { return totalMissed_; }
      set {
        totalMissed_ = value;
      }
    }

    /// <summary>Field number for the "latestBlockNum" field.</summary>
    public const int LatestBlockNumFieldNumber = 7;
    private long latestBlockNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LatestBlockNum {
      get { return latestBlockNum_; }
      set {
        latestBlockNum_ = value;
      }
    }

    /// <summary>Field number for the "latestSlotNum" field.</summary>
    public const int LatestSlotNumFieldNumber = 8;
    private long latestSlotNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LatestSlotNum {
      get { return latestSlotNum_; }
      set {
        latestSlotNum_ = value;
      }
    }

    /// <summary>Field number for the "isJobs" field.</summary>
    public const int IsJobsFieldNumber = 9;
    private bool isJobs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsJobs {
      get { return isJobs_; }
      set {
        isJobs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Witness);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Witness other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (VoteCount != other.VoteCount) return false;
      if (PubKey != other.PubKey) return false;
      if (Url != other.Url) return false;
      if (TotalProduced != other.TotalProduced) return false;
      if (TotalMissed != other.TotalMissed) return false;
      if (LatestBlockNum != other.LatestBlockNum) return false;
      if (LatestSlotNum != other.LatestSlotNum) return false;
      if (IsJobs != other.IsJobs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (VoteCount != 0L) hash ^= VoteCount.GetHashCode();
      if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (TotalProduced != 0L) hash ^= TotalProduced.GetHashCode();
      if (TotalMissed != 0L) hash ^= TotalMissed.GetHashCode();
      if (LatestBlockNum != 0L) hash ^= LatestBlockNum.GetHashCode();
      if (LatestSlotNum != 0L) hash ^= LatestSlotNum.GetHashCode();
      if (IsJobs != false) hash ^= IsJobs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Address);
      }
      if (VoteCount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(VoteCount);
      }
      if (PubKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PubKey);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Url);
      }
      if (TotalProduced != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalProduced);
      }
      if (TotalMissed != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalMissed);
      }
      if (LatestBlockNum != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(LatestBlockNum);
      }
      if (LatestSlotNum != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(LatestSlotNum);
      }
      if (IsJobs != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsJobs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      if (VoteCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VoteCount);
      }
      if (PubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PubKey);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (TotalProduced != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalProduced);
      }
      if (TotalMissed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalMissed);
      }
      if (LatestBlockNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LatestBlockNum);
      }
      if (LatestSlotNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LatestSlotNum);
      }
      if (IsJobs != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Witness other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.VoteCount != 0L) {
        VoteCount = other.VoteCount;
      }
      if (other.PubKey.Length != 0) {
        PubKey = other.PubKey;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.TotalProduced != 0L) {
        TotalProduced = other.TotalProduced;
      }
      if (other.TotalMissed != 0L) {
        TotalMissed = other.TotalMissed;
      }
      if (other.LatestBlockNum != 0L) {
        LatestBlockNum = other.LatestBlockNum;
      }
      if (other.LatestSlotNum != 0L) {
        LatestSlotNum = other.LatestSlotNum;
      }
      if (other.IsJobs != false) {
        IsJobs = other.IsJobs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadBytes();
            break;
          }
          case 16: {
            VoteCount = input.ReadInt64();
            break;
          }
          case 26: {
            PubKey = input.ReadBytes();
            break;
          }
          case 34: {
            Url = input.ReadString();
            break;
          }
          case 40: {
            TotalProduced = input.ReadInt64();
            break;
          }
          case 48: {
            TotalMissed = input.ReadInt64();
            break;
          }
          case 56: {
            LatestBlockNum = input.ReadInt64();
            break;
          }
          case 64: {
            LatestSlotNum = input.ReadInt64();
            break;
          }
          case 72: {
            IsJobs = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Vote Change
  /// </summary>
  public sealed partial class Votes : pb::IMessage<Votes> {
    private static readonly pb::MessageParser<Votes> _parser = new pb::MessageParser<Votes>(() => new Votes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Votes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Votes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Votes(Votes other) : this() {
      address_ = other.address_;
      oldVotes_ = other.oldVotes_.Clone();
      newVotes_ = other.newVotes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Votes Clone() {
      return new Votes(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "old_votes" field.</summary>
    public const int OldVotesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.Vote> _repeated_oldVotes_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.Vote.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Vote> oldVotes_ = new pbc::RepeatedField<global::Protocol.Vote>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Vote> OldVotes {
      get { return oldVotes_; }
    }

    /// <summary>Field number for the "new_votes" field.</summary>
    public const int NewVotesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.Vote> _repeated_newVotes_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.Vote.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Vote> newVotes_ = new pbc::RepeatedField<global::Protocol.Vote>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Vote> NewVotes {
      get { return newVotes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Votes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Votes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if(!oldVotes_.Equals(other.oldVotes_)) return false;
      if(!newVotes_.Equals(other.newVotes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      hash ^= oldVotes_.GetHashCode();
      hash ^= newVotes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Address);
      }
      oldVotes_.WriteTo(output, _repeated_oldVotes_codec);
      newVotes_.WriteTo(output, _repeated_newVotes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      size += oldVotes_.CalculateSize(_repeated_oldVotes_codec);
      size += newVotes_.CalculateSize(_repeated_newVotes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Votes other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      oldVotes_.Add(other.oldVotes_);
      newVotes_.Add(other.newVotes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadBytes();
            break;
          }
          case 18: {
            oldVotes_.AddEntriesFrom(input, _repeated_oldVotes_codec);
            break;
          }
          case 26: {
            newVotes_.AddEntriesFrom(input, _repeated_newVotes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TXOutput : pb::IMessage<TXOutput> {
    private static readonly pb::MessageParser<TXOutput> _parser = new pb::MessageParser<TXOutput>(() => new TXOutput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TXOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TXOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TXOutput(TXOutput other) : this() {
      value_ = other.value_;
      pubKeyHash_ = other.pubKeyHash_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TXOutput Clone() {
      return new TXOutput(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private long value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "pubKeyHash" field.</summary>
    public const int PubKeyHashFieldNumber = 2;
    private pb::ByteString pubKeyHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PubKeyHash {
      get { return pubKeyHash_; }
      set {
        pubKeyHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TXOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TXOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      if (PubKeyHash != other.PubKeyHash) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0L) hash ^= Value.GetHashCode();
      if (PubKeyHash.Length != 0) hash ^= PubKeyHash.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Value);
      }
      if (PubKeyHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PubKeyHash);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      if (PubKeyHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PubKeyHash);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TXOutput other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
      if (other.PubKeyHash.Length != 0) {
        PubKeyHash = other.PubKeyHash;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadInt64();
            break;
          }
          case 18: {
            PubKeyHash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TXInput : pb::IMessage<TXInput> {
    private static readonly pb::MessageParser<TXInput> _parser = new pb::MessageParser<TXInput>(() => new TXInput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TXInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TXInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TXInput(TXInput other) : this() {
      RawData = other.rawData_ != null ? other.RawData.Clone() : null;
      signature_ = other.signature_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TXInput Clone() {
      return new TXInput(this);
    }

    /// <summary>Field number for the "raw_data" field.</summary>
    public const int RawDataFieldNumber = 1;
    private global::Protocol.TXInput.Types.raw rawData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.TXInput.Types.raw RawData {
      get { return rawData_; }
      set {
        rawData_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 4;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TXInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TXInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RawData, other.RawData)) return false;
      if (Signature != other.Signature) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rawData_ != null) hash ^= RawData.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rawData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RawData);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Signature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rawData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RawData);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TXInput other) {
      if (other == null) {
        return;
      }
      if (other.rawData_ != null) {
        if (rawData_ == null) {
          rawData_ = new global::Protocol.TXInput.Types.raw();
        }
        RawData.MergeFrom(other.RawData);
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (rawData_ == null) {
              rawData_ = new global::Protocol.TXInput.Types.raw();
            }
            input.ReadMessage(rawData_);
            break;
          }
          case 34: {
            Signature = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TXInput message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class raw : pb::IMessage<raw> {
        private static readonly pb::MessageParser<raw> _parser = new pb::MessageParser<raw>(() => new raw());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<raw> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.TXInput.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public raw() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public raw(raw other) : this() {
          txID_ = other.txID_;
          vout_ = other.vout_;
          pubKey_ = other.pubKey_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public raw Clone() {
          return new raw(this);
        }

        /// <summary>Field number for the "txID" field.</summary>
        public const int TxIDFieldNumber = 1;
        private pb::ByteString txID_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString TxID {
          get { return txID_; }
          set {
            txID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "vout" field.</summary>
        public const int VoutFieldNumber = 2;
        private long vout_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Vout {
          get { return vout_; }
          set {
            vout_ = value;
          }
        }

        /// <summary>Field number for the "pubKey" field.</summary>
        public const int PubKeyFieldNumber = 3;
        private pb::ByteString pubKey_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PubKey {
          get { return pubKey_; }
          set {
            pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as raw);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(raw other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TxID != other.TxID) return false;
          if (Vout != other.Vout) return false;
          if (PubKey != other.PubKey) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TxID.Length != 0) hash ^= TxID.GetHashCode();
          if (Vout != 0L) hash ^= Vout.GetHashCode();
          if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (TxID.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(TxID);
          }
          if (Vout != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Vout);
          }
          if (PubKey.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(PubKey);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TxID.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(TxID);
          }
          if (Vout != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Vout);
          }
          if (PubKey.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(PubKey);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(raw other) {
          if (other == null) {
            return;
          }
          if (other.TxID.Length != 0) {
            TxID = other.TxID;
          }
          if (other.Vout != 0L) {
            Vout = other.Vout;
          }
          if (other.PubKey.Length != 0) {
            PubKey = other.PubKey;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                TxID = input.ReadBytes();
                break;
              }
              case 16: {
                Vout = input.ReadInt64();
                break;
              }
              case 26: {
                PubKey = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class TXOutputs : pb::IMessage<TXOutputs> {
    private static readonly pb::MessageParser<TXOutputs> _parser = new pb::MessageParser<TXOutputs>(() => new TXOutputs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TXOutputs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TXOutputs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TXOutputs(TXOutputs other) : this() {
      outputs_ = other.outputs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TXOutputs Clone() {
      return new TXOutputs(this);
    }

    /// <summary>Field number for the "outputs" field.</summary>
    public const int OutputsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.TXOutput> _repeated_outputs_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.TXOutput.Parser);
    private readonly pbc::RepeatedField<global::Protocol.TXOutput> outputs_ = new pbc::RepeatedField<global::Protocol.TXOutput>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.TXOutput> Outputs {
      get { return outputs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TXOutputs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TXOutputs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!outputs_.Equals(other.outputs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= outputs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      outputs_.WriteTo(output, _repeated_outputs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += outputs_.CalculateSize(_repeated_outputs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TXOutputs other) {
      if (other == null) {
        return;
      }
      outputs_.Add(other.outputs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            outputs_.AddEntriesFrom(input, _repeated_outputs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Transaction : pb::IMessage<Transaction> {
    private static readonly pb::MessageParser<Transaction> _parser = new pb::MessageParser<Transaction>(() => new Transaction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction(Transaction other) : this() {
      RawData = other.rawData_ != null ? other.RawData.Clone() : null;
      signature_ = other.signature_.Clone();
      ret_ = other.ret_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction Clone() {
      return new Transaction(this);
    }

    /// <summary>Field number for the "raw_data" field.</summary>
    public const int RawDataFieldNumber = 1;
    private global::Protocol.Transaction.Types.raw rawData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Transaction.Types.raw RawData {
      get { return rawData_; }
      set {
        rawData_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_signature_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> signature_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Signature {
      get { return signature_; }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Protocol.Transaction.Types.Result> _repeated_ret_codec
        = pb::FieldCodec.ForMessage(42, global::Protocol.Transaction.Types.Result.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Transaction.Types.Result> ret_ = new pbc::RepeatedField<global::Protocol.Transaction.Types.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Transaction.Types.Result> Ret {
      get { return ret_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RawData, other.RawData)) return false;
      if(!signature_.Equals(other.signature_)) return false;
      if(!ret_.Equals(other.ret_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rawData_ != null) hash ^= RawData.GetHashCode();
      hash ^= signature_.GetHashCode();
      hash ^= ret_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rawData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RawData);
      }
      signature_.WriteTo(output, _repeated_signature_codec);
      ret_.WriteTo(output, _repeated_ret_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rawData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RawData);
      }
      size += signature_.CalculateSize(_repeated_signature_codec);
      size += ret_.CalculateSize(_repeated_ret_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transaction other) {
      if (other == null) {
        return;
      }
      if (other.rawData_ != null) {
        if (rawData_ == null) {
          rawData_ = new global::Protocol.Transaction.Types.raw();
        }
        RawData.MergeFrom(other.RawData);
      }
      signature_.Add(other.signature_);
      ret_.Add(other.ret_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (rawData_ == null) {
              rawData_ = new global::Protocol.Transaction.Types.raw();
            }
            input.ReadMessage(rawData_);
            break;
          }
          case 18: {
            signature_.AddEntriesFrom(input, _repeated_signature_codec);
            break;
          }
          case 42: {
            ret_.AddEntriesFrom(input, _repeated_ret_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Transaction message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Contract : pb::IMessage<Contract> {
        private static readonly pb::MessageParser<Contract> _parser = new pb::MessageParser<Contract>(() => new Contract());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Contract> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.Transaction.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contract() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contract(Contract other) : this() {
          type_ = other.type_;
          Parameter = other.parameter_ != null ? other.Parameter.Clone() : null;
          provider_ = other.provider_;
          contractName_ = other.contractName_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contract Clone() {
          return new Contract(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Protocol.Transaction.Types.Contract.Types.ContractType type_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protocol.Transaction.Types.Contract.Types.ContractType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "parameter" field.</summary>
        public const int ParameterFieldNumber = 2;
        private global::Google.Protobuf.WellKnownTypes.Any parameter_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Any Parameter {
          get { return parameter_; }
          set {
            parameter_ = value;
          }
        }

        /// <summary>Field number for the "provider" field.</summary>
        public const int ProviderFieldNumber = 3;
        private pb::ByteString provider_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Provider {
          get { return provider_; }
          set {
            provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ContractName" field.</summary>
        public const int ContractNameFieldNumber = 4;
        private pb::ByteString contractName_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString ContractName {
          get { return contractName_; }
          set {
            contractName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Contract);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Contract other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (!object.Equals(Parameter, other.Parameter)) return false;
          if (Provider != other.Provider) return false;
          if (ContractName != other.ContractName) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != 0) hash ^= Type.GetHashCode();
          if (parameter_ != null) hash ^= Parameter.GetHashCode();
          if (Provider.Length != 0) hash ^= Provider.GetHashCode();
          if (ContractName.Length != 0) hash ^= ContractName.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (parameter_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Parameter);
          }
          if (Provider.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(Provider);
          }
          if (ContractName.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(ContractName);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (parameter_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parameter);
          }
          if (Provider.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Provider);
          }
          if (ContractName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContractName);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Contract other) {
          if (other == null) {
            return;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.parameter_ != null) {
            if (parameter_ == null) {
              parameter_ = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            Parameter.MergeFrom(other.Parameter);
          }
          if (other.Provider.Length != 0) {
            Provider = other.Provider;
          }
          if (other.ContractName.Length != 0) {
            ContractName = other.ContractName;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                type_ = (global::Protocol.Transaction.Types.Contract.Types.ContractType) input.ReadEnum();
                break;
              }
              case 18: {
                if (parameter_ == null) {
                  parameter_ = new global::Google.Protobuf.WellKnownTypes.Any();
                }
                input.ReadMessage(parameter_);
                break;
              }
              case 26: {
                Provider = input.ReadBytes();
                break;
              }
              case 34: {
                ContractName = input.ReadBytes();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Contract message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum ContractType {
            [pbr::OriginalName("AccountCreateContract")] AccountCreateContract = 0,
            [pbr::OriginalName("TransferContract")] TransferContract = 1,
            [pbr::OriginalName("TransferAssetContract")] TransferAssetContract = 2,
            [pbr::OriginalName("VoteAssetContract")] VoteAssetContract = 3,
            [pbr::OriginalName("VoteWitnessContract")] VoteWitnessContract = 4,
            [pbr::OriginalName("WitnessCreateContract")] WitnessCreateContract = 5,
            [pbr::OriginalName("AssetIssueContract")] AssetIssueContract = 6,
            [pbr::OriginalName("DeployContract")] DeployContract = 7,
            [pbr::OriginalName("WitnessUpdateContract")] WitnessUpdateContract = 8,
            [pbr::OriginalName("ParticipateAssetIssueContract")] ParticipateAssetIssueContract = 9,
            [pbr::OriginalName("AccountUpdateContract")] AccountUpdateContract = 10,
            [pbr::OriginalName("FreezeBalanceContract")] FreezeBalanceContract = 11,
            [pbr::OriginalName("UnfreezeBalanceContract")] UnfreezeBalanceContract = 12,
            [pbr::OriginalName("WithdrawBalanceContract")] WithdrawBalanceContract = 13,
            [pbr::OriginalName("CustomContract")] CustomContract = 20,
          }

        }
        #endregion

      }

      public sealed partial class Result : pb::IMessage<Result> {
        private static readonly pb::MessageParser<Result> _parser = new pb::MessageParser<Result>(() => new Result());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Result> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.Transaction.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Result() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Result(Result other) : this() {
          fee_ = other.fee_;
          ret_ = other.ret_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Result Clone() {
          return new Result(this);
        }

        /// <summary>Field number for the "fee" field.</summary>
        public const int FeeFieldNumber = 1;
        private long fee_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Fee {
          get { return fee_; }
          set {
            fee_ = value;
          }
        }

        /// <summary>Field number for the "ret" field.</summary>
        public const int RetFieldNumber = 2;
        private global::Protocol.Transaction.Types.Result.Types.code ret_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protocol.Transaction.Types.Result.Types.code Ret {
          get { return ret_; }
          set {
            ret_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Result);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Result other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Fee != other.Fee) return false;
          if (Ret != other.Ret) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Fee != 0L) hash ^= Fee.GetHashCode();
          if (Ret != 0) hash ^= Ret.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Fee != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Fee);
          }
          if (Ret != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Ret);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Fee != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fee);
          }
          if (Ret != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Result other) {
          if (other == null) {
            return;
          }
          if (other.Fee != 0L) {
            Fee = other.Fee;
          }
          if (other.Ret != 0) {
            Ret = other.Ret;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Fee = input.ReadInt64();
                break;
              }
              case 16: {
                ret_ = (global::Protocol.Transaction.Types.Result.Types.code) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Result message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum code {
            [pbr::OriginalName("SUCESS")] Sucess = 0,
            [pbr::OriginalName("FAILED")] Failed = 1,
          }

        }
        #endregion

      }

      public sealed partial class raw : pb::IMessage<raw> {
        private static readonly pb::MessageParser<raw> _parser = new pb::MessageParser<raw>(() => new raw());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<raw> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.Transaction.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public raw() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public raw(raw other) : this() {
          refBlockBytes_ = other.refBlockBytes_;
          refBlockNum_ = other.refBlockNum_;
          refBlockHash_ = other.refBlockHash_;
          expiration_ = other.expiration_;
          auths_ = other.auths_.Clone();
          data_ = other.data_;
          contract_ = other.contract_.Clone();
          scripts_ = other.scripts_;
          timestamp_ = other.timestamp_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public raw Clone() {
          return new raw(this);
        }

        /// <summary>Field number for the "ref_block_bytes" field.</summary>
        public const int RefBlockBytesFieldNumber = 1;
        private pb::ByteString refBlockBytes_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString RefBlockBytes {
          get { return refBlockBytes_; }
          set {
            refBlockBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ref_block_num" field.</summary>
        public const int RefBlockNumFieldNumber = 3;
        private long refBlockNum_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RefBlockNum {
          get { return refBlockNum_; }
          set {
            refBlockNum_ = value;
          }
        }

        /// <summary>Field number for the "ref_block_hash" field.</summary>
        public const int RefBlockHashFieldNumber = 4;
        private pb::ByteString refBlockHash_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString RefBlockHash {
          get { return refBlockHash_; }
          set {
            refBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "expiration" field.</summary>
        public const int ExpirationFieldNumber = 8;
        private long expiration_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Expiration {
          get { return expiration_; }
          set {
            expiration_ = value;
          }
        }

        /// <summary>Field number for the "auths" field.</summary>
        public const int AuthsFieldNumber = 9;
        private static readonly pb::FieldCodec<global::Protocol.acuthrity> _repeated_auths_codec
            = pb::FieldCodec.ForMessage(74, global::Protocol.acuthrity.Parser);
        private readonly pbc::RepeatedField<global::Protocol.acuthrity> auths_ = new pbc::RepeatedField<global::Protocol.acuthrity>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Protocol.acuthrity> Auths {
          get { return auths_; }
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 10;
        private pb::ByteString data_ = pb::ByteString.Empty;
        /// <summary>
        /// data not used
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Data {
          get { return data_; }
          set {
            data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "contract" field.</summary>
        public const int ContractFieldNumber = 11;
        private static readonly pb::FieldCodec<global::Protocol.Transaction.Types.Contract> _repeated_contract_codec
            = pb::FieldCodec.ForMessage(90, global::Protocol.Transaction.Types.Contract.Parser);
        private readonly pbc::RepeatedField<global::Protocol.Transaction.Types.Contract> contract_ = new pbc::RepeatedField<global::Protocol.Transaction.Types.Contract>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Protocol.Transaction.Types.Contract> Contract {
          get { return contract_; }
        }

        /// <summary>Field number for the "scripts" field.</summary>
        public const int ScriptsFieldNumber = 12;
        private pb::ByteString scripts_ = pb::ByteString.Empty;
        /// <summary>
        /// scripts not used
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Scripts {
          get { return scripts_; }
          set {
            scripts_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 14;
        private long timestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp {
          get { return timestamp_; }
          set {
            timestamp_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as raw);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(raw other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RefBlockBytes != other.RefBlockBytes) return false;
          if (RefBlockNum != other.RefBlockNum) return false;
          if (RefBlockHash != other.RefBlockHash) return false;
          if (Expiration != other.Expiration) return false;
          if(!auths_.Equals(other.auths_)) return false;
          if (Data != other.Data) return false;
          if(!contract_.Equals(other.contract_)) return false;
          if (Scripts != other.Scripts) return false;
          if (Timestamp != other.Timestamp) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RefBlockBytes.Length != 0) hash ^= RefBlockBytes.GetHashCode();
          if (RefBlockNum != 0L) hash ^= RefBlockNum.GetHashCode();
          if (RefBlockHash.Length != 0) hash ^= RefBlockHash.GetHashCode();
          if (Expiration != 0L) hash ^= Expiration.GetHashCode();
          hash ^= auths_.GetHashCode();
          if (Data.Length != 0) hash ^= Data.GetHashCode();
          hash ^= contract_.GetHashCode();
          if (Scripts.Length != 0) hash ^= Scripts.GetHashCode();
          if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RefBlockBytes.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(RefBlockBytes);
          }
          if (RefBlockNum != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(RefBlockNum);
          }
          if (RefBlockHash.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(RefBlockHash);
          }
          if (Expiration != 0L) {
            output.WriteRawTag(64);
            output.WriteInt64(Expiration);
          }
          auths_.WriteTo(output, _repeated_auths_codec);
          if (Data.Length != 0) {
            output.WriteRawTag(82);
            output.WriteBytes(Data);
          }
          contract_.WriteTo(output, _repeated_contract_codec);
          if (Scripts.Length != 0) {
            output.WriteRawTag(98);
            output.WriteBytes(Scripts);
          }
          if (Timestamp != 0L) {
            output.WriteRawTag(112);
            output.WriteInt64(Timestamp);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RefBlockBytes.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(RefBlockBytes);
          }
          if (RefBlockNum != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RefBlockNum);
          }
          if (RefBlockHash.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(RefBlockHash);
          }
          if (Expiration != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Expiration);
          }
          size += auths_.CalculateSize(_repeated_auths_codec);
          if (Data.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
          }
          size += contract_.CalculateSize(_repeated_contract_codec);
          if (Scripts.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Scripts);
          }
          if (Timestamp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(raw other) {
          if (other == null) {
            return;
          }
          if (other.RefBlockBytes.Length != 0) {
            RefBlockBytes = other.RefBlockBytes;
          }
          if (other.RefBlockNum != 0L) {
            RefBlockNum = other.RefBlockNum;
          }
          if (other.RefBlockHash.Length != 0) {
            RefBlockHash = other.RefBlockHash;
          }
          if (other.Expiration != 0L) {
            Expiration = other.Expiration;
          }
          auths_.Add(other.auths_);
          if (other.Data.Length != 0) {
            Data = other.Data;
          }
          contract_.Add(other.contract_);
          if (other.Scripts.Length != 0) {
            Scripts = other.Scripts;
          }
          if (other.Timestamp != 0L) {
            Timestamp = other.Timestamp;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                RefBlockBytes = input.ReadBytes();
                break;
              }
              case 24: {
                RefBlockNum = input.ReadInt64();
                break;
              }
              case 34: {
                RefBlockHash = input.ReadBytes();
                break;
              }
              case 64: {
                Expiration = input.ReadInt64();
                break;
              }
              case 74: {
                auths_.AddEntriesFrom(input, _repeated_auths_codec);
                break;
              }
              case 82: {
                Data = input.ReadBytes();
                break;
              }
              case 90: {
                contract_.AddEntriesFrom(input, _repeated_contract_codec);
                break;
              }
              case 98: {
                Scripts = input.ReadBytes();
                break;
              }
              case 112: {
                Timestamp = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class BlockHeader : pb::IMessage<BlockHeader> {
    private static readonly pb::MessageParser<BlockHeader> _parser = new pb::MessageParser<BlockHeader>(() => new BlockHeader());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeader(BlockHeader other) : this() {
      RawData = other.rawData_ != null ? other.RawData.Clone() : null;
      witnessSignature_ = other.witnessSignature_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeader Clone() {
      return new BlockHeader(this);
    }

    /// <summary>Field number for the "raw_data" field.</summary>
    public const int RawDataFieldNumber = 1;
    private global::Protocol.BlockHeader.Types.raw rawData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BlockHeader.Types.raw RawData {
      get { return rawData_; }
      set {
        rawData_ = value;
      }
    }

    /// <summary>Field number for the "witness_signature" field.</summary>
    public const int WitnessSignatureFieldNumber = 2;
    private pb::ByteString witnessSignature_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString WitnessSignature {
      get { return witnessSignature_; }
      set {
        witnessSignature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RawData, other.RawData)) return false;
      if (WitnessSignature != other.WitnessSignature) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rawData_ != null) hash ^= RawData.GetHashCode();
      if (WitnessSignature.Length != 0) hash ^= WitnessSignature.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rawData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RawData);
      }
      if (WitnessSignature.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(WitnessSignature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rawData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RawData);
      }
      if (WitnessSignature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(WitnessSignature);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockHeader other) {
      if (other == null) {
        return;
      }
      if (other.rawData_ != null) {
        if (rawData_ == null) {
          rawData_ = new global::Protocol.BlockHeader.Types.raw();
        }
        RawData.MergeFrom(other.RawData);
      }
      if (other.WitnessSignature.Length != 0) {
        WitnessSignature = other.WitnessSignature;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (rawData_ == null) {
              rawData_ = new global::Protocol.BlockHeader.Types.raw();
            }
            input.ReadMessage(rawData_);
            break;
          }
          case 18: {
            WitnessSignature = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BlockHeader message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class raw : pb::IMessage<raw> {
        private static readonly pb::MessageParser<raw> _parser = new pb::MessageParser<raw>(() => new raw());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<raw> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.BlockHeader.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public raw() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public raw(raw other) : this() {
          timestamp_ = other.timestamp_;
          txTrieRoot_ = other.txTrieRoot_;
          parentHash_ = other.parentHash_;
          number_ = other.number_;
          witnessId_ = other.witnessId_;
          witnessAddress_ = other.witnessAddress_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public raw Clone() {
          return new raw(this);
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 1;
        private long timestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Timestamp {
          get { return timestamp_; }
          set {
            timestamp_ = value;
          }
        }

        /// <summary>Field number for the "txTrieRoot" field.</summary>
        public const int TxTrieRootFieldNumber = 2;
        private pb::ByteString txTrieRoot_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString TxTrieRoot {
          get { return txTrieRoot_; }
          set {
            txTrieRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "parentHash" field.</summary>
        public const int ParentHashFieldNumber = 3;
        private pb::ByteString parentHash_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString ParentHash {
          get { return parentHash_; }
          set {
            parentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "number" field.</summary>
        public const int NumberFieldNumber = 7;
        private long number_;
        /// <summary>
        ///bytes nonce = 5;
        ///bytes difficulty = 6;
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Number {
          get { return number_; }
          set {
            number_ = value;
          }
        }

        /// <summary>Field number for the "witness_id" field.</summary>
        public const int WitnessIdFieldNumber = 8;
        private long witnessId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long WitnessId {
          get { return witnessId_; }
          set {
            witnessId_ = value;
          }
        }

        /// <summary>Field number for the "witness_address" field.</summary>
        public const int WitnessAddressFieldNumber = 9;
        private pb::ByteString witnessAddress_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString WitnessAddress {
          get { return witnessAddress_; }
          set {
            witnessAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as raw);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(raw other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Timestamp != other.Timestamp) return false;
          if (TxTrieRoot != other.TxTrieRoot) return false;
          if (ParentHash != other.ParentHash) return false;
          if (Number != other.Number) return false;
          if (WitnessId != other.WitnessId) return false;
          if (WitnessAddress != other.WitnessAddress) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
          if (TxTrieRoot.Length != 0) hash ^= TxTrieRoot.GetHashCode();
          if (ParentHash.Length != 0) hash ^= ParentHash.GetHashCode();
          if (Number != 0L) hash ^= Number.GetHashCode();
          if (WitnessId != 0L) hash ^= WitnessId.GetHashCode();
          if (WitnessAddress.Length != 0) hash ^= WitnessAddress.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Timestamp != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Timestamp);
          }
          if (TxTrieRoot.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(TxTrieRoot);
          }
          if (ParentHash.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(ParentHash);
          }
          if (Number != 0L) {
            output.WriteRawTag(56);
            output.WriteInt64(Number);
          }
          if (WitnessId != 0L) {
            output.WriteRawTag(64);
            output.WriteInt64(WitnessId);
          }
          if (WitnessAddress.Length != 0) {
            output.WriteRawTag(74);
            output.WriteBytes(WitnessAddress);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Timestamp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
          }
          if (TxTrieRoot.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(TxTrieRoot);
          }
          if (ParentHash.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(ParentHash);
          }
          if (Number != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Number);
          }
          if (WitnessId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(WitnessId);
          }
          if (WitnessAddress.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(WitnessAddress);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(raw other) {
          if (other == null) {
            return;
          }
          if (other.Timestamp != 0L) {
            Timestamp = other.Timestamp;
          }
          if (other.TxTrieRoot.Length != 0) {
            TxTrieRoot = other.TxTrieRoot;
          }
          if (other.ParentHash.Length != 0) {
            ParentHash = other.ParentHash;
          }
          if (other.Number != 0L) {
            Number = other.Number;
          }
          if (other.WitnessId != 0L) {
            WitnessId = other.WitnessId;
          }
          if (other.WitnessAddress.Length != 0) {
            WitnessAddress = other.WitnessAddress;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Timestamp = input.ReadInt64();
                break;
              }
              case 18: {
                TxTrieRoot = input.ReadBytes();
                break;
              }
              case 26: {
                ParentHash = input.ReadBytes();
                break;
              }
              case 56: {
                Number = input.ReadInt64();
                break;
              }
              case 64: {
                WitnessId = input.ReadInt64();
                break;
              }
              case 74: {
                WitnessAddress = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// block
  /// </summary>
  public sealed partial class Block : pb::IMessage<Block> {
    private static readonly pb::MessageParser<Block> _parser = new pb::MessageParser<Block>(() => new Block());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Block> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block(Block other) : this() {
      transactions_ = other.transactions_.Clone();
      BlockHeader = other.blockHeader_ != null ? other.BlockHeader.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block Clone() {
      return new Block(this);
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.Transaction> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.Transaction.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Transaction> transactions_ = new pbc::RepeatedField<global::Protocol.Transaction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Transaction> Transactions {
      get { return transactions_; }
    }

    /// <summary>Field number for the "block_header" field.</summary>
    public const int BlockHeaderFieldNumber = 2;
    private global::Protocol.BlockHeader blockHeader_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BlockHeader BlockHeader {
      get { return blockHeader_; }
      set {
        blockHeader_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Block);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Block other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!transactions_.Equals(other.transactions_)) return false;
      if (!object.Equals(BlockHeader, other.BlockHeader)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= transactions_.GetHashCode();
      if (blockHeader_ != null) hash ^= BlockHeader.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      transactions_.WriteTo(output, _repeated_transactions_codec);
      if (blockHeader_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BlockHeader);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      if (blockHeader_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockHeader);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Block other) {
      if (other == null) {
        return;
      }
      transactions_.Add(other.transactions_);
      if (other.blockHeader_ != null) {
        if (blockHeader_ == null) {
          blockHeader_ = new global::Protocol.BlockHeader();
        }
        BlockHeader.MergeFrom(other.BlockHeader);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
          case 18: {
            if (blockHeader_ == null) {
              blockHeader_ = new global::Protocol.BlockHeader();
            }
            input.ReadMessage(blockHeader_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChainInventory : pb::IMessage<ChainInventory> {
    private static readonly pb::MessageParser<ChainInventory> _parser = new pb::MessageParser<ChainInventory>(() => new ChainInventory());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChainInventory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChainInventory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChainInventory(ChainInventory other) : this() {
      ids_ = other.ids_.Clone();
      remainNum_ = other.remainNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChainInventory Clone() {
      return new ChainInventory(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.ChainInventory.Types.BlockId> _repeated_ids_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.ChainInventory.Types.BlockId.Parser);
    private readonly pbc::RepeatedField<global::Protocol.ChainInventory.Types.BlockId> ids_ = new pbc::RepeatedField<global::Protocol.ChainInventory.Types.BlockId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.ChainInventory.Types.BlockId> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "remain_num" field.</summary>
    public const int RemainNumFieldNumber = 2;
    private long remainNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RemainNum {
      get { return remainNum_; }
      set {
        remainNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChainInventory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChainInventory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      if (RemainNum != other.RemainNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      if (RemainNum != 0L) hash ^= RemainNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
      if (RemainNum != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RemainNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (RemainNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RemainNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChainInventory other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
      if (other.RemainNum != 0L) {
        RemainNum = other.RemainNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
          case 16: {
            RemainNum = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ChainInventory message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class BlockId : pb::IMessage<BlockId> {
        private static readonly pb::MessageParser<BlockId> _parser = new pb::MessageParser<BlockId>(() => new BlockId());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BlockId> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.ChainInventory.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockId() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockId(BlockId other) : this() {
          hash_ = other.hash_;
          number_ = other.number_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockId Clone() {
          return new BlockId(this);
        }

        /// <summary>Field number for the "hash" field.</summary>
        public const int HashFieldNumber = 1;
        private pb::ByteString hash_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Hash {
          get { return hash_; }
          set {
            hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "number" field.</summary>
        public const int NumberFieldNumber = 2;
        private long number_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Number {
          get { return number_; }
          set {
            number_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BlockId);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BlockId other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Hash != other.Hash) return false;
          if (Number != other.Number) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Hash.Length != 0) hash ^= Hash.GetHashCode();
          if (Number != 0L) hash ^= Number.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Hash.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Hash);
          }
          if (Number != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Number);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Hash.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
          }
          if (Number != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Number);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BlockId other) {
          if (other == null) {
            return;
          }
          if (other.Hash.Length != 0) {
            Hash = other.Hash;
          }
          if (other.Number != 0L) {
            Number = other.Number;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Hash = input.ReadBytes();
                break;
              }
              case 16: {
                Number = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Inventory
  /// </summary>
  public sealed partial class BlockInventory : pb::IMessage<BlockInventory> {
    private static readonly pb::MessageParser<BlockInventory> _parser = new pb::MessageParser<BlockInventory>(() => new BlockInventory());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockInventory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockInventory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockInventory(BlockInventory other) : this() {
      ids_ = other.ids_.Clone();
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockInventory Clone() {
      return new BlockInventory(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.BlockInventory.Types.BlockId> _repeated_ids_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.BlockInventory.Types.BlockId.Parser);
    private readonly pbc::RepeatedField<global::Protocol.BlockInventory.Types.BlockId> ids_ = new pbc::RepeatedField<global::Protocol.BlockInventory.Types.BlockId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.BlockInventory.Types.BlockId> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Protocol.BlockInventory.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.BlockInventory.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockInventory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockInventory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockInventory other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
          case 16: {
            type_ = (global::Protocol.BlockInventory.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BlockInventory message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("SYNC")] Sync = 0,
        [pbr::OriginalName("ADVTISE")] Advtise = 1,
        [pbr::OriginalName("FETCH")] Fetch = 2,
      }

      public sealed partial class BlockId : pb::IMessage<BlockId> {
        private static readonly pb::MessageParser<BlockId> _parser = new pb::MessageParser<BlockId>(() => new BlockId());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BlockId> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protocol.BlockInventory.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockId() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockId(BlockId other) : this() {
          hash_ = other.hash_;
          number_ = other.number_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BlockId Clone() {
          return new BlockId(this);
        }

        /// <summary>Field number for the "hash" field.</summary>
        public const int HashFieldNumber = 1;
        private pb::ByteString hash_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Hash {
          get { return hash_; }
          set {
            hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "number" field.</summary>
        public const int NumberFieldNumber = 2;
        private long number_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Number {
          get { return number_; }
          set {
            number_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BlockId);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BlockId other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Hash != other.Hash) return false;
          if (Number != other.Number) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Hash.Length != 0) hash ^= Hash.GetHashCode();
          if (Number != 0L) hash ^= Number.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Hash.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Hash);
          }
          if (Number != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Number);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Hash.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
          }
          if (Number != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Number);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BlockId other) {
          if (other == null) {
            return;
          }
          if (other.Hash.Length != 0) {
            Hash = other.Hash;
          }
          if (other.Number != 0L) {
            Number = other.Number;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Hash = input.ReadBytes();
                break;
              }
              case 16: {
                Number = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Inventory : pb::IMessage<Inventory> {
    private static readonly pb::MessageParser<Inventory> _parser = new pb::MessageParser<Inventory>(() => new Inventory());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Inventory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inventory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inventory(Inventory other) : this() {
      type_ = other.type_;
      ids_ = other.ids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inventory Clone() {
      return new Inventory(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Protocol.Inventory.Types.InventoryType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Inventory.Types.InventoryType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_ids_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> ids_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Inventory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Inventory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!ids_.Equals(other.ids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= ids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      ids_.WriteTo(output, _repeated_ids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += ids_.CalculateSize(_repeated_ids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Inventory other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      ids_.Add(other.ids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Protocol.Inventory.Types.InventoryType) input.ReadEnum();
            break;
          }
          case 18: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Inventory message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum InventoryType {
        [pbr::OriginalName("TRX")] Trx = 0,
        [pbr::OriginalName("BLOCK")] Block = 1,
      }

    }
    #endregion

  }

  public sealed partial class Items : pb::IMessage<Items> {
    private static readonly pb::MessageParser<Items> _parser = new pb::MessageParser<Items>(() => new Items());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Items> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Items() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Items(Items other) : this() {
      type_ = other.type_;
      blocks_ = other.blocks_.Clone();
      blockHeaders_ = other.blockHeaders_.Clone();
      transactions_ = other.transactions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Items Clone() {
      return new Items(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Protocol.Items.Types.ItemType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Items.Types.ItemType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "blocks" field.</summary>
    public const int BlocksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocol.Block> _repeated_blocks_codec
        = pb::FieldCodec.ForMessage(18, global::Protocol.Block.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Block> blocks_ = new pbc::RepeatedField<global::Protocol.Block>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Block> Blocks {
      get { return blocks_; }
    }

    /// <summary>Field number for the "block_headers" field.</summary>
    public const int BlockHeadersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocol.BlockHeader> _repeated_blockHeaders_codec
        = pb::FieldCodec.ForMessage(26, global::Protocol.BlockHeader.Parser);
    private readonly pbc::RepeatedField<global::Protocol.BlockHeader> blockHeaders_ = new pbc::RepeatedField<global::Protocol.BlockHeader>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.BlockHeader> BlockHeaders {
      get { return blockHeaders_; }
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protocol.Transaction> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(34, global::Protocol.Transaction.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Transaction> transactions_ = new pbc::RepeatedField<global::Protocol.Transaction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Transaction> Transactions {
      get { return transactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Items);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Items other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!blocks_.Equals(other.blocks_)) return false;
      if(!blockHeaders_.Equals(other.blockHeaders_)) return false;
      if(!transactions_.Equals(other.transactions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= blocks_.GetHashCode();
      hash ^= blockHeaders_.GetHashCode();
      hash ^= transactions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      blocks_.WriteTo(output, _repeated_blocks_codec);
      blockHeaders_.WriteTo(output, _repeated_blockHeaders_codec);
      transactions_.WriteTo(output, _repeated_transactions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += blocks_.CalculateSize(_repeated_blocks_codec);
      size += blockHeaders_.CalculateSize(_repeated_blockHeaders_codec);
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Items other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      blocks_.Add(other.blocks_);
      blockHeaders_.Add(other.blockHeaders_);
      transactions_.Add(other.transactions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Protocol.Items.Types.ItemType) input.ReadEnum();
            break;
          }
          case 18: {
            blocks_.AddEntriesFrom(input, _repeated_blocks_codec);
            break;
          }
          case 26: {
            blockHeaders_.AddEntriesFrom(input, _repeated_blockHeaders_codec);
            break;
          }
          case 34: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Items message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ItemType {
        [pbr::OriginalName("ERR")] Err = 0,
        [pbr::OriginalName("TRX")] Trx = 1,
        [pbr::OriginalName("BLOCK")] Block = 2,
        [pbr::OriginalName("BLOCKHEADER")] Blockheader = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// DynamicProperties
  /// </summary>
  public sealed partial class DynamicProperties : pb::IMessage<DynamicProperties> {
    private static readonly pb::MessageParser<DynamicProperties> _parser = new pb::MessageParser<DynamicProperties>(() => new DynamicProperties());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DynamicProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicProperties(DynamicProperties other) : this() {
      lastSolidityBlockNum_ = other.lastSolidityBlockNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicProperties Clone() {
      return new DynamicProperties(this);
    }

    /// <summary>Field number for the "last_solidity_block_num" field.</summary>
    public const int LastSolidityBlockNumFieldNumber = 1;
    private long lastSolidityBlockNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastSolidityBlockNum {
      get { return lastSolidityBlockNum_; }
      set {
        lastSolidityBlockNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DynamicProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DynamicProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastSolidityBlockNum != other.LastSolidityBlockNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LastSolidityBlockNum != 0L) hash ^= LastSolidityBlockNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastSolidityBlockNum != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LastSolidityBlockNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastSolidityBlockNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastSolidityBlockNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DynamicProperties other) {
      if (other == null) {
        return;
      }
      if (other.LastSolidityBlockNum != 0L) {
        LastSolidityBlockNum = other.LastSolidityBlockNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LastSolidityBlockNum = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DisconnectMessage : pb::IMessage<DisconnectMessage> {
    private static readonly pb::MessageParser<DisconnectMessage> _parser = new pb::MessageParser<DisconnectMessage>(() => new DisconnectMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisconnectMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectMessage(DisconnectMessage other) : this() {
      reason_ = other.reason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectMessage Clone() {
      return new DisconnectMessage(this);
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 1;
    private global::Protocol.ReasonCode reason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.ReasonCode Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisconnectMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisconnectMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reason != other.Reason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reason != 0) hash ^= Reason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reason != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisconnectMessage other) {
      if (other == null) {
        return;
      }
      if (other.Reason != 0) {
        Reason = other.Reason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            reason_ = (global::Protocol.ReasonCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HelloMessage : pb::IMessage<HelloMessage> {
    private static readonly pb::MessageParser<HelloMessage> _parser = new pb::MessageParser<HelloMessage>(() => new HelloMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HelloMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.TronReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloMessage(HelloMessage other) : this() {
      From = other.from_ != null ? other.From.Clone() : null;
      version_ = other.version_;
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HelloMessage Clone() {
      return new HelloMessage(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::Protocol.Endpoint from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Endpoint From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HelloMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HelloMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (Version != other.Version) return false;
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Version);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HelloMessage other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          from_ = new global::Protocol.Endpoint();
        }
        From.MergeFrom(other.From);
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (from_ == null) {
              from_ = new global::Protocol.Endpoint();
            }
            input.ReadMessage(from_);
            break;
          }
          case 16: {
            Version = input.ReadInt32();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
