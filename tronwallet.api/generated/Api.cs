// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/api.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protocol {

  /// <summary>Holder for reflection information generated from api/api.proto</summary>
  public static partial class ApiReflection {

    #region Descriptor
    /// <summary>File descriptor for api/api.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ApiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1hcGkvYXBpLnByb3RvEghwcm90b2NvbBoPY29yZS9Ucm9uLnByb3RvGhNj",
            "b3JlL0NvbnRyYWN0LnByb3RvGhxnb29nbGUvYXBpL2Fubm90YXRpb25zLnBy",
            "b3RvItwCCgZSZXR1cm4SDgoGcmVzdWx0GAEgASgIEiwKBGNvZGUYAiABKA4y",
            "Hi5wcm90b2NvbC5SZXR1cm4ucmVzcG9uc2VfY29kZRIPCgdtZXNzYWdlGAMg",
            "ASgMIoICCg1yZXNwb25zZV9jb2RlEgsKB1NVQ0NFU1MQABIMCghTSUdFUlJP",
            "UhABEhsKF0NPTlRSQUNUX1ZBTElEQVRFX0VSUk9SEAISFgoSQ09OVFJBQ1Rf",
            "RVhFX0VSUk9SEAMSEgoOQkFORFdJVEhfRVJST1IQBBIZChVEVVBfVFJBTlNB",
            "Q1RJT05fRVJST1IQBRIPCgtUQVBPU19FUlJPUhAGEh0KGVRPT19CSUdfVFJB",
            "TlNBQ1RJT05fRVJST1IQBxIgChxUUkFOU0FDVElPTl9FWFBJUkFUSU9OX0VS",
            "Uk9SEAgSDwoLU0VSVkVSX0JVU1kQCRIPCgtPVEhFUl9FUlJPUhAUIjcKDkJs",
            "b2NrUmVmZXJlbmNlEhEKCWJsb2NrX251bRgBIAEoAxISCgpibG9ja19oYXNo",
            "GAIgASgMIjIKC0FjY291bnRMaXN0EiMKCGFjY291bnRzGAEgAygLMhEucHJv",
            "dG9jb2wuQWNjb3VudCIzCgtXaXRuZXNzTGlzdBIkCgl3aXRuZXNzZXMYASAD",
            "KAsyES5wcm90b2NvbC5XaXRuZXNzIkIKDkFzc2V0SXNzdWVMaXN0EjAKCmFz",
            "c2V0SXNzdWUYASADKAsyHC5wcm90b2NvbC5Bc3NldElzc3VlQ29udHJhY3Qi",
            "KwoJQmxvY2tMaXN0Eh4KBWJsb2NrGAEgAygLMg8ucHJvdG9jb2wuQmxvY2si",
            "PQoPVHJhbnNhY3Rpb25MaXN0EioKC3RyYW5zYWN0aW9uGAEgAygLMhUucHJv",
            "dG9jb2wuVHJhbnNhY3Rpb24iKQoITm9kZUxpc3QSHQoFbm9kZXMYASADKAsy",
            "Di5wcm90b2NvbC5Ob2RlIioKBE5vZGUSIgoHYWRkcmVzcxgBIAEoCzIRLnBy",
            "b3RvY29sLkFkZHJlc3MiJQoHQWRkcmVzcxIMCgRob3N0GAEgASgMEgwKBHBv",
            "cnQYAiABKAUiDgoMRW1wdHlNZXNzYWdlIhwKDU51bWJlck1lc3NhZ2USCwoD",
            "bnVtGAEgASgDIh0KDEJ5dGVzTWVzc2FnZRINCgV2YWx1ZRgBIAEoDCJFCgtU",
            "aW1lTWVzc2FnZRIbChNiZWdpbkluTWlsbGlzZWNvbmRzGAEgASgDEhkKEWVu",
            "ZEluTWlsbGlzZWNvbmRzGAIgASgDIi4KCkJsb2NrTGltaXQSEAoIc3RhcnRO",
            "dW0YASABKAMSDgoGZW5kTnVtGAIgASgDIjsKEFRyYW5zYWN0aW9uTGltaXQS",
            "FQoNdHJhbnNhY3Rpb25JZBgBIAEoDBIQCghsaW1pdE51bRgCIAEoAzL/FgoG",
            "V2FsbGV0EmcKCkdldEFjY291bnQSES5wcm90b2NvbC5BY2NvdW50GhEucHJv",
            "dG9jb2wuQWNjb3VudCIzgtPkkwItIhIvd2FsbGV0L2dldGFjY291bnQ6ASpa",
            "FBISL3dhbGxldC9nZXRhY2NvdW50EmwKEUNyZWF0ZVRyYW5zYWN0aW9uEhou",
            "cHJvdG9jb2wuVHJhbnNmZXJDb250cmFjdBoVLnByb3RvY29sLlRyYW5zYWN0",
            "aW9uIiSC0+STAh4iGS93YWxsZXQvY3JlYXRldHJhbnNhY3Rpb246ASoSaAoU",
            "QnJvYWRjYXN0VHJhbnNhY3Rpb24SFS5wcm90b2NvbC5UcmFuc2FjdGlvbhoQ",
            "LnByb3RvY29sLlJldHVybiIngtPkkwIhIhwvd2FsbGV0L2Jyb2FkY2FzdHRy",
            "YW5zYWN0aW9uOgEqEnQKDExpc3RBY2NvdW50cxIWLnByb3RvY29sLkVtcHR5",
            "TWVzc2FnZRoVLnByb3RvY29sLkFjY291bnRMaXN0IjWC0+STAi8iEy93YWxs",
            "ZXQvbGlzdGFjY291bnQ6ASpaFRITL3dhbGxldC9saXN0YWNjb3VudBJpCg1V",
            "cGRhdGVBY2NvdW50Eh8ucHJvdG9jb2wuQWNjb3VudFVwZGF0ZUNvbnRyYWN0",
            "GhUucHJvdG9jb2wuVHJhbnNhY3Rpb24iIILT5JMCGiIVL3dhbGxldC91cGRh",
            "dGVhY2NvdW50OgEqEnEKElZvdGVXaXRuZXNzQWNjb3VudBIdLnByb3RvY29s",
            "LlZvdGVXaXRuZXNzQ29udHJhY3QaFS5wcm90b2NvbC5UcmFuc2FjdGlvbiIl",
            "gtPkkwIfIhovd2FsbGV0L3ZvdGV3aXRuZXNzYWNjb3VudDoBKhJsChBDcmVh",
            "dGVBc3NldElzc3VlEhwucHJvdG9jb2wuQXNzZXRJc3N1ZUNvbnRyYWN0GhUu",
            "cHJvdG9jb2wuVHJhbnNhY3Rpb24iI4LT5JMCHSIYL3dhbGxldC9jcmVhdGVh",
            "c3NldGlzc3VlOgEqEnkKDUxpc3RXaXRuZXNzZXMSFi5wcm90b2NvbC5FbXB0",
            "eU1lc3NhZ2UaFS5wcm90b2NvbC5XaXRuZXNzTGlzdCI5gtPkkwIzIhUvd2Fs",
            "bGV0L2xpc3R3aXRuZXNzZXM6ASpaFxIVL3dhbGxldC9saXN0d2l0bmVzc2Vz",
            "EmkKDVVwZGF0ZVdpdG5lc3MSHy5wcm90b2NvbC5XaXRuZXNzVXBkYXRlQ29u",
            "dHJhY3QaFS5wcm90b2NvbC5UcmFuc2FjdGlvbiIggtPkkwIaIhUvd2FsbGV0",
            "L3VwZGF0ZXdpdG5lc3M6ASoSaQoNQ3JlYXRlV2l0bmVzcxIfLnByb3RvY29s",
            "LldpdG5lc3NDcmVhdGVDb250cmFjdBoVLnByb3RvY29sLlRyYW5zYWN0aW9u",
            "IiCC0+STAhoiFS93YWxsZXQvY3JlYXRld2l0bmVzczoBKhJpCg1UcmFuc2Zl",
            "ckFzc2V0Eh8ucHJvdG9jb2wuVHJhbnNmZXJBc3NldENvbnRyYWN0GhUucHJv",
            "dG9jb2wuVHJhbnNhY3Rpb24iIILT5JMCGiIVL3dhbGxldC90cmFuc2ZlcmFz",
            "c2V0OgEqEoEBChVQYXJ0aWNpcGF0ZUFzc2V0SXNzdWUSJy5wcm90b2NvbC5Q",
            "YXJ0aWNpcGF0ZUFzc2V0SXNzdWVDb250cmFjdBoVLnByb3RvY29sLlRyYW5z",
            "YWN0aW9uIiiC0+STAiIiHS93YWxsZXQvcGFydGljaXBhdGVhc3NldGlzc3Vl",
            "OgEqEmkKDUZyZWV6ZUJhbGFuY2USHy5wcm90b2NvbC5GcmVlemVCYWxhbmNl",
            "Q29udHJhY3QaFS5wcm90b2NvbC5UcmFuc2FjdGlvbiIggtPkkwIaIhUvd2Fs",
            "bGV0L2ZyZWV6ZWJhbGFuY2U6ASoSbwoPVW5mcmVlemVCYWxhbmNlEiEucHJv",
            "dG9jb2wuVW5mcmVlemVCYWxhbmNlQ29udHJhY3QaFS5wcm90b2NvbC5UcmFu",
            "c2FjdGlvbiIigtPkkwIcIhcvd2FsbGV0L3VuZnJlZXplYmFsYW5jZToBKhJv",
            "Cg9XaXRoZHJhd0JhbGFuY2USIS5wcm90b2NvbC5XaXRoZHJhd0JhbGFuY2VD",
            "b250cmFjdBoVLnByb3RvY29sLlRyYW5zYWN0aW9uIiKC0+STAhwiFy93YWxs",
            "ZXQvd2l0aGRyYXdiYWxhbmNlOgEqEmoKCUxpc3ROb2RlcxIWLnByb3RvY29s",
            "LkVtcHR5TWVzc2FnZRoSLnByb3RvY29sLk5vZGVMaXN0IjGC0+STAisiES93",
            "YWxsZXQvbGlzdG5vZGVzOgEqWhMSES93YWxsZXQvbGlzdG5vZGVzEogBChFH",
            "ZXRBc3NldElzc3VlTGlzdBIWLnByb3RvY29sLkVtcHR5TWVzc2FnZRoYLnBy",
            "b3RvY29sLkFzc2V0SXNzdWVMaXN0IkGC0+STAjsiGS93YWxsZXQvZ2V0YXNz",
            "ZXRpc3N1ZWxpc3Q6ASpaGxIZL3dhbGxldC9nZXRhc3NldGlzc3VlbGlzdBJw",
            "ChZHZXRBc3NldElzc3VlQnlBY2NvdW50EhEucHJvdG9jb2wuQWNjb3VudBoY",
            "LnByb3RvY29sLkFzc2V0SXNzdWVMaXN0IimC0+STAiMiHi93YWxsZXQvZ2V0",
            "YXNzZXRpc3N1ZWJ5YWNjb3VudDoBKhJzChNHZXRBc3NldElzc3VlQnlOYW1l",
            "EhYucHJvdG9jb2wuQnl0ZXNNZXNzYWdlGhwucHJvdG9jb2wuQXNzZXRJc3N1",
            "ZUNvbnRyYWN0IiaC0+STAiAiGy93YWxsZXQvZ2V0YXNzZXRpc3N1ZWJ5bmFt",
            "ZToBKhJtCgtHZXROb3dCbG9jaxIWLnByb3RvY29sLkVtcHR5TWVzc2FnZRoP",
            "LnByb3RvY29sLkJsb2NrIjWC0+STAi8iEy93YWxsZXQvZ2V0bm93YmxvY2s6",
            "ASpaFRITL3dhbGxldC9nZXRub3dibG9jaxJ0Cg1HZXRCbG9ja0J5TnVtEhcu",
            "cHJvdG9jb2wuTnVtYmVyTWVzc2FnZRoPLnByb3RvY29sLkJsb2NrIjmC0+ST",
            "AjMiFS93YWxsZXQvZ2V0YmxvY2tieW51bToBKloXEhUvd2FsbGV0L2dldGJs",
            "b2NrYnludW0ShAEKEFRvdGFsVHJhbnNhY3Rpb24SFi5wcm90b2NvbC5FbXB0",
            "eU1lc3NhZ2UaFy5wcm90b2NvbC5OdW1iZXJNZXNzYWdlIj+C0+STAjkiGC93",
            "YWxsZXQvdG90YWx0cmFuc2FjdGlvbjoBKloaEhgvd2FsbGV0L3RvdGFsdHJh",
            "bnNhY3Rpb24SWAoMR2V0QmxvY2tCeUlkEhYucHJvdG9jb2wuQnl0ZXNNZXNz",
            "YWdlGg8ucHJvdG9jb2wuQmxvY2siH4LT5JMCGSIUL3dhbGxldC9nZXRibG9j",
            "a2J5aWQ6ASoSaAoTR2V0QmxvY2tCeUxpbWl0TmV4dBIULnByb3RvY29sLkJs",
            "b2NrTGltaXQaEy5wcm90b2NvbC5CbG9ja0xpc3QiJoLT5JMCICIbL3dhbGxl",
            "dC9nZXRibG9ja2J5bGltaXRuZXh0OgEqEmsKE0dldEJsb2NrQnlMYXRlc3RO",
            "dW0SFy5wcm90b2NvbC5OdW1iZXJNZXNzYWdlGhMucHJvdG9jb2wuQmxvY2tM",
            "aXN0IiaC0+STAiAiGy93YWxsZXQvZ2V0YmxvY2tieWxhdGVzdG51bToBKhJq",
            "ChJHZXRUcmFuc2FjdGlvbkJ5SWQSFi5wcm90b2NvbC5CeXRlc01lc3NhZ2Ua",
            "FS5wcm90b2NvbC5UcmFuc2FjdGlvbiIlgtPkkwIfIhovd2FsbGV0L2dldHRy",
            "YW5zYWN0aW9uYnlpZDoBKjLfDAoOV2FsbGV0U29saWRpdHkSWQoKR2V0QWNj",
            "b3VudBIRLnByb3RvY29sLkFjY291bnQaES5wcm90b2NvbC5BY2NvdW50IiWC",
            "0+STAh8iGi93YWxsZXRzb2xpZGl0eS9nZXRhY2NvdW50OgEqEmYKDExpc3RB",
            "Y2NvdW50cxIWLnByb3RvY29sLkVtcHR5TWVzc2FnZRoVLnByb3RvY29sLkFj",
            "Y291bnRMaXN0IieC0+STAiEiHC93YWxsZXRzb2xpZGl0eS9saXN0YWNjb3Vu",
            "dHM6ASoSaAoNTGlzdFdpdG5lc3NlcxIWLnByb3RvY29sLkVtcHR5TWVzc2Fn",
            "ZRoVLnByb3RvY29sLldpdG5lc3NMaXN0IiiC0+STAiIiHS93YWxsZXRzb2xp",
            "ZGl0eS9saXN0d2l0bmVzc2VzOgEqEnMKEUdldEFzc2V0SXNzdWVMaXN0EhYu",
            "cHJvdG9jb2wuRW1wdHlNZXNzYWdlGhgucHJvdG9jb2wuQXNzZXRJc3N1ZUxp",
            "c3QiLILT5JMCJiIhL3dhbGxldHNvbGlkaXR5L2dldGFzc2V0aXNzdWVsaXN0",
            "OgEqEooBChxHZXRBc3NldElzc3VlTGlzdEJ5VGltZXN0YW1wEhcucHJvdG9j",
            "b2wuTnVtYmVyTWVzc2FnZRoYLnByb3RvY29sLkFzc2V0SXNzdWVMaXN0IjeC",
            "0+STAjEiLC93YWxsZXRzb2xpZGl0eS9nZXRhc3NldGlzc3VlbGlzdGJ5dGlt",
            "ZXN0YW1wOgEqEngKFkdldEFzc2V0SXNzdWVCeUFjY291bnQSES5wcm90b2Nv",
            "bC5BY2NvdW50GhgucHJvdG9jb2wuQXNzZXRJc3N1ZUxpc3QiMYLT5JMCKyIm",
            "L3dhbGxldHNvbGlkaXR5L2dldGFzc2V0aXNzdWVieWFjY291bnQ6ASoSewoT",
            "R2V0QXNzZXRJc3N1ZUJ5TmFtZRIWLnByb3RvY29sLkJ5dGVzTWVzc2FnZRoc",
            "LnByb3RvY29sLkFzc2V0SXNzdWVDb250cmFjdCIugtPkkwIoIiMvd2FsbGV0",
            "c29saWRpdHkvZ2V0YXNzZXRpc3N1ZWJ5bmFtZToBKhJeCgtHZXROb3dCbG9j",
            "axIWLnByb3RvY29sLkVtcHR5TWVzc2FnZRoPLnByb3RvY29sLkJsb2NrIiaC",
            "0+STAiAiGy93YWxsZXRzb2xpZGl0eS9nZXRub3dibG9jazoBKhJjCg1HZXRC",
            "bG9ja0J5TnVtEhcucHJvdG9jb2wuTnVtYmVyTWVzc2FnZRoPLnByb3RvY29s",
            "LkJsb2NrIiiC0+STAiIiHS93YWxsZXRzb2xpZGl0eS9nZXRibG9ja2J5bnVt",
            "OgEqEnAKEFRvdGFsVHJhbnNhY3Rpb24SFi5wcm90b2NvbC5FbXB0eU1lc3Nh",
            "Z2UaFy5wcm90b2NvbC5OdW1iZXJNZXNzYWdlIiuC0+STAiUiIC93YWxsZXRz",
            "b2xpZGl0eS90b3RhbHRyYW5zYWN0aW9uOgEqEnIKEkdldFRyYW5zYWN0aW9u",
            "QnlJZBIWLnByb3RvY29sLkJ5dGVzTWVzc2FnZRoVLnByb3RvY29sLlRyYW5z",
            "YWN0aW9uIi2C0+STAiciIi93YWxsZXRzb2xpZGl0eS9nZXR0cmFuc2FjdGlv",
            "bmJ5aWQ6ASoShQEKGkdldFRyYW5zYWN0aW9uc0J5VGltZXN0YW1wEhUucHJv",
            "dG9jb2wuVGltZU1lc3NhZ2UaGS5wcm90b2NvbC5UcmFuc2FjdGlvbkxpc3Qi",
            "NYLT5JMCLyIqL3dhbGxldHNvbGlkaXR5L2dldHRyYW5zYWN0aW9uc2J5dGlt",
            "ZXN0YW1wOgEqEnsKF0dldFRyYW5zYWN0aW9uc0Zyb21UaGlzEhEucHJvdG9j",
            "b2wuQWNjb3VudBoZLnByb3RvY29sLlRyYW5zYWN0aW9uTGlzdCIygtPkkwIs",
            "Iicvd2FsbGV0c29saWRpdHkvZ2V0dHJhbnNhY3Rpb25zZnJvbXRoaXM6ASoS",
            "dwoVR2V0VHJhbnNhY3Rpb25zVG9UaGlzEhEucHJvdG9jb2wuQWNjb3VudBoZ",
            "LnByb3RvY29sLlRyYW5zYWN0aW9uTGlzdCIwgtPkkwIqIiUvd2FsbGV0c29s",
            "aWRpdHkvZ2V0dHJhbnNhY3Rpb25zdG90aGlzOgEqMpkCCghEYXRhYmFzZRJH",
            "ChFnZXRCbG9ja1JlZmVyZW5jZRIWLnByb3RvY29sLkVtcHR5TWVzc2FnZRoY",
            "LnByb3RvY29sLkJsb2NrUmVmZXJlbmNlIgASTQoUR2V0RHluYW1pY1Byb3Bl",
            "cnRpZXMSFi5wcm90b2NvbC5FbXB0eU1lc3NhZ2UaGy5wcm90b2NvbC5EeW5h",
            "bWljUHJvcGVydGllcyIAEjgKC0dldE5vd0Jsb2NrEhYucHJvdG9jb2wuRW1w",
            "dHlNZXNzYWdlGg8ucHJvdG9jb2wuQmxvY2siABI7Cg1HZXRCbG9ja0J5TnVt",
            "EhcucHJvdG9jb2wuTnVtYmVyTWVzc2FnZRoPLnByb3RvY29sLkJsb2NrIgAy",
            "CQoHTmV0d29ya0JBCgxvcmcudHJvbi5hcGlCB0dycGNBUElaKGdpdGh1Yi5j",
            "b20vdHJvbnByb3RvY29sL2dycGMtZ2F0ZXdheS9hcGliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Protocol.TronReflection.Descriptor, global::Protocol.ContractReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Return), global::Protocol.Return.Parser, new[]{ "Result", "Code", "Message" }, null, new[]{ typeof(global::Protocol.Return.Types.response_code) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BlockReference), global::Protocol.BlockReference.Parser, new[]{ "BlockNum", "BlockHash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.AccountList), global::Protocol.AccountList.Parser, new[]{ "Accounts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.WitnessList), global::Protocol.WitnessList.Parser, new[]{ "Witnesses" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.AssetIssueList), global::Protocol.AssetIssueList.Parser, new[]{ "AssetIssue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BlockList), global::Protocol.BlockList.Parser, new[]{ "Block" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TransactionList), global::Protocol.TransactionList.Parser, new[]{ "Transaction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.NodeList), global::Protocol.NodeList.Parser, new[]{ "Nodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Node), global::Protocol.Node.Parser, new[]{ "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.Address), global::Protocol.Address.Parser, new[]{ "Host", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.EmptyMessage), global::Protocol.EmptyMessage.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.NumberMessage), global::Protocol.NumberMessage.Parser, new[]{ "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BytesMessage), global::Protocol.BytesMessage.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TimeMessage), global::Protocol.TimeMessage.Parser, new[]{ "BeginInMilliseconds", "EndInMilliseconds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BlockLimit), global::Protocol.BlockLimit.Parser, new[]{ "StartNum", "EndNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.TransactionLimit), global::Protocol.TransactionLimit.Parser, new[]{ "TransactionId", "LimitNum" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Return : pb::IMessage<Return> {
    private static readonly pb::MessageParser<Return> _parser = new pb::MessageParser<Return>(() => new Return());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Return> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ApiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Return() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Return(Return other) : this() {
      result_ = other.result_;
      code_ = other.code_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Return Clone() {
      return new Return(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private global::Protocol.Return.Types.response_code code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Return.Types.response_code Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private pb::ByteString message_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Return);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Return other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Code != other.Code) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != false) hash ^= Result.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != false) {
        output.WriteRawTag(8);
        output.WriteBool(Result);
      }
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Code);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != false) {
        size += 1 + 1;
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Return other) {
      if (other == null) {
        return;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadBool();
            break;
          }
          case 16: {
            code_ = (global::Protocol.Return.Types.response_code) input.ReadEnum();
            break;
          }
          case 26: {
            Message = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Return message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum response_code {
        [pbr::OriginalName("SUCCESS")] Success = 0,
        /// <summary>
        /// error in signature
        /// </summary>
        [pbr::OriginalName("SIGERROR")] Sigerror = 1,
        [pbr::OriginalName("CONTRACT_VALIDATE_ERROR")] ContractValidateError = 2,
        [pbr::OriginalName("CONTRACT_EXE_ERROR")] ContractExeError = 3,
        [pbr::OriginalName("BANDWITH_ERROR")] BandwithError = 4,
        [pbr::OriginalName("DUP_TRANSACTION_ERROR")] DupTransactionError = 5,
        [pbr::OriginalName("TAPOS_ERROR")] TaposError = 6,
        [pbr::OriginalName("TOO_BIG_TRANSACTION_ERROR")] TooBigTransactionError = 7,
        [pbr::OriginalName("TRANSACTION_EXPIRATION_ERROR")] TransactionExpirationError = 8,
        [pbr::OriginalName("SERVER_BUSY")] ServerBusy = 9,
        [pbr::OriginalName("OTHER_ERROR")] OtherError = 20,
      }

    }
    #endregion

  }
  public sealed partial class BlockReference : pb::IMessage<BlockReference> {
    private static readonly pb::MessageParser<BlockReference> _parser = new pb::MessageParser<BlockReference>(() => new BlockReference());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockReference> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ApiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockReference() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockReference(BlockReference other) : this() {
      blockNum_ = other.blockNum_;
      blockHash_ = other.blockHash_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockReference Clone() {
      return new BlockReference(this);
    }

    /// <summary>Field number for the "block_num" field.</summary>
    public const int BlockNumFieldNumber = 1;
    private long blockNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockNum {
      get { return blockNum_; }
      set {
        blockNum_ = value;
      }
    }

    /// <summary>Field number for the "block_hash" field.</summary>
    public const int BlockHashFieldNumber = 2;
    private pb::ByteString blockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BlockHash {
      get { return blockHash_; }
      set {
        blockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockReference);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockReference other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockNum != other.BlockNum) return false;
      if (BlockHash != other.BlockHash) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockNum != 0L) hash ^= BlockNum.GetHashCode();
      if (BlockHash.Length != 0) hash ^= BlockHash.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockNum != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BlockNum);
      }
      if (BlockHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(BlockHash);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockNum);
      }
      if (BlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BlockHash);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockReference other) {
      if (other == null) {
        return;
      }
      if (other.BlockNum != 0L) {
        BlockNum = other.BlockNum;
      }
      if (other.BlockHash.Length != 0) {
        BlockHash = other.BlockHash;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BlockNum = input.ReadInt64();
            break;
          }
          case 18: {
            BlockHash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }
  public sealed partial class AccountList : pb::IMessage<AccountList> {
    private static readonly pb::MessageParser<AccountList> _parser = new pb::MessageParser<AccountList>(() => new AccountList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ApiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountList(AccountList other) : this() {
      accounts_ = other.accounts_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountList Clone() {
      return new AccountList(this);
    }

    /// <summary>Field number for the "accounts" field.</summary>
    public const int AccountsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.Account> _repeated_accounts_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.Account.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Account> accounts_ = new pbc::RepeatedField<global::Protocol.Account>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Account> Accounts {
      get { return accounts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!accounts_.Equals(other.accounts_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= accounts_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      accounts_.WriteTo(output, _repeated_accounts_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += accounts_.CalculateSize(_repeated_accounts_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountList other) {
      if (other == null) {
        return;
      }
      accounts_.Add(other.accounts_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            accounts_.AddEntriesFrom(input, _repeated_accounts_codec);
            break;
          }
        }
      }
    }

  }
  public sealed partial class WitnessList : pb::IMessage<WitnessList> {
    private static readonly pb::MessageParser<WitnessList> _parser = new pb::MessageParser<WitnessList>(() => new WitnessList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WitnessList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ApiReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WitnessList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WitnessList(WitnessList other) : this() {
      witnesses_ = other.witnesses_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WitnessList Clone() {
      return new WitnessList(this);
    }

    /// <summary>Field number for the "witnesses" field.</summary>
    public const int WitnessesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.Witness> _repeated_witnesses_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.Witness.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Witness> witnesses_ = new pbc::RepeatedField<global::Protocol.Witness>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Witness> Witnesses {
      get { return witnesses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WitnessList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WitnessList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!witnesses_.Equals(other.witnesses_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= witnesses_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      witnesses_.WriteTo(output, _repeated_witnesses_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += witnesses_.CalculateSize(_repeated_witnesses_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WitnessList other) {
      if (other == null) {
        return;
      }
      witnesses_.Add(other.witnesses_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            witnesses_.AddEntriesFrom(input, _repeated_witnesses_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AssetIssueList : pb::IMessage<AssetIssueList> {
    private static readonly pb::MessageParser<AssetIssueList> _parser = new pb::MessageParser<AssetIssueList>(() => new AssetIssueList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssetIssueList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ApiReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetIssueList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetIssueList(AssetIssueList other) : this() {
      assetIssue_ = other.assetIssue_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetIssueList Clone() {
      return new AssetIssueList(this);
    }

    /// <summary>Field number for the "assetIssue" field.</summary>
    public const int AssetIssueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.AssetIssueContract> _repeated_assetIssue_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.AssetIssueContract.Parser);
    private readonly pbc::RepeatedField<global::Protocol.AssetIssueContract> assetIssue_ = new pbc::RepeatedField<global::Protocol.AssetIssueContract>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.AssetIssueContract> AssetIssue {
      get { return assetIssue_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssetIssueList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssetIssueList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!assetIssue_.Equals(other.assetIssue_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= assetIssue_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      assetIssue_.WriteTo(output, _repeated_assetIssue_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += assetIssue_.CalculateSize(_repeated_assetIssue_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssetIssueList other) {
      if (other == null) {
        return;
      }
      assetIssue_.Add(other.assetIssue_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            assetIssue_.AddEntriesFrom(input, _repeated_assetIssue_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockList : pb::IMessage<BlockList> {
    private static readonly pb::MessageParser<BlockList> _parser = new pb::MessageParser<BlockList>(() => new BlockList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ApiReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockList(BlockList other) : this() {
      block_ = other.block_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockList Clone() {
      return new BlockList(this);
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.Block> _repeated_block_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.Block.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Block> block_ = new pbc::RepeatedField<global::Protocol.Block>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Block> Block {
      get { return block_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!block_.Equals(other.block_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= block_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      block_.WriteTo(output, _repeated_block_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += block_.CalculateSize(_repeated_block_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockList other) {
      if (other == null) {
        return;
      }
      block_.Add(other.block_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            block_.AddEntriesFrom(input, _repeated_block_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionList : pb::IMessage<TransactionList> {
    private static readonly pb::MessageParser<TransactionList> _parser = new pb::MessageParser<TransactionList>(() => new TransactionList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ApiReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionList(TransactionList other) : this() {
      transaction_ = other.transaction_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionList Clone() {
      return new TransactionList(this);
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.Transaction> _repeated_transaction_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.Transaction.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Transaction> transaction_ = new pbc::RepeatedField<global::Protocol.Transaction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Transaction> Transaction {
      get { return transaction_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!transaction_.Equals(other.transaction_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= transaction_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      transaction_.WriteTo(output, _repeated_transaction_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += transaction_.CalculateSize(_repeated_transaction_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionList other) {
      if (other == null) {
        return;
      }
      transaction_.Add(other.transaction_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            transaction_.AddEntriesFrom(input, _repeated_transaction_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Gossip node list
  /// </summary>
  public sealed partial class NodeList : pb::IMessage<NodeList> {
    private static readonly pb::MessageParser<NodeList> _parser = new pb::MessageParser<NodeList>(() => new NodeList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ApiReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeList(NodeList other) : this() {
      nodes_ = other.nodes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeList Clone() {
      return new NodeList(this);
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocol.Node> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(10, global::Protocol.Node.Parser);
    private readonly pbc::RepeatedField<global::Protocol.Node> nodes_ = new pbc::RepeatedField<global::Protocol.Node>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocol.Node> Nodes {
      get { return nodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodes_.Equals(other.nodes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodes_.WriteTo(output, _repeated_nodes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeList other) {
      if (other == null) {
        return;
      }
      nodes_.Add(other.nodes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Gossip node
  /// </summary>
  public sealed partial class Node : pb::IMessage<Node> {
    private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Node> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ApiReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node(Node other) : this() {
      Address = other.address_ != null ? other.Address.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node Clone() {
      return new Node(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::Protocol.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocol.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Node);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Node other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Node other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          address_ = new global::Protocol.Address();
        }
        Address.MergeFrom(other.Address);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (address_ == null) {
              address_ = new global::Protocol.Address();
            }
            input.ReadMessage(address_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Gossip node address
  /// </summary>
  public sealed partial class Address : pb::IMessage<Address> {
    private static readonly pb::MessageParser<Address> _parser = new pb::MessageParser<Address>(() => new Address());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Address> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ApiReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Address() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Address(Address other) : this() {
      host_ = other.host_;
      port_ = other.port_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Address Clone() {
      return new Address(this);
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 1;
    private pb::ByteString host_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Address);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Address other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Host.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Address other) {
      if (other == null) {
        return;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Host = input.ReadBytes();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EmptyMessage : pb::IMessage<EmptyMessage> {
    private static readonly pb::MessageParser<EmptyMessage> _parser = new pb::MessageParser<EmptyMessage>(() => new EmptyMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmptyMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ApiReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage(EmptyMessage other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage Clone() {
      return new EmptyMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmptyMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmptyMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmptyMessage other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class NumberMessage : pb::IMessage<NumberMessage> {
    private static readonly pb::MessageParser<NumberMessage> _parser = new pb::MessageParser<NumberMessage>(() => new NumberMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NumberMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ApiReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumberMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumberMessage(NumberMessage other) : this() {
      num_ = other.num_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumberMessage Clone() {
      return new NumberMessage(this);
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 1;
    private long num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NumberMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NumberMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Num != other.Num) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Num != 0L) hash ^= Num.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Num != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Num != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NumberMessage other) {
      if (other == null) {
        return;
      }
      if (other.Num != 0L) {
        Num = other.Num;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Num = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BytesMessage : pb::IMessage<BytesMessage> {
    private static readonly pb::MessageParser<BytesMessage> _parser = new pb::MessageParser<BytesMessage>(() => new BytesMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BytesMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ApiReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BytesMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BytesMessage(BytesMessage other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BytesMessage Clone() {
      return new BytesMessage(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private pb::ByteString value_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BytesMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BytesMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BytesMessage other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TimeMessage : pb::IMessage<TimeMessage> {
    private static readonly pb::MessageParser<TimeMessage> _parser = new pb::MessageParser<TimeMessage>(() => new TimeMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ApiReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeMessage(TimeMessage other) : this() {
      beginInMilliseconds_ = other.beginInMilliseconds_;
      endInMilliseconds_ = other.endInMilliseconds_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeMessage Clone() {
      return new TimeMessage(this);
    }

    /// <summary>Field number for the "beginInMilliseconds" field.</summary>
    public const int BeginInMillisecondsFieldNumber = 1;
    private long beginInMilliseconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BeginInMilliseconds {
      get { return beginInMilliseconds_; }
      set {
        beginInMilliseconds_ = value;
      }
    }

    /// <summary>Field number for the "endInMilliseconds" field.</summary>
    public const int EndInMillisecondsFieldNumber = 2;
    private long endInMilliseconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndInMilliseconds {
      get { return endInMilliseconds_; }
      set {
        endInMilliseconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeginInMilliseconds != other.BeginInMilliseconds) return false;
      if (EndInMilliseconds != other.EndInMilliseconds) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BeginInMilliseconds != 0L) hash ^= BeginInMilliseconds.GetHashCode();
      if (EndInMilliseconds != 0L) hash ^= EndInMilliseconds.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BeginInMilliseconds != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BeginInMilliseconds);
      }
      if (EndInMilliseconds != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EndInMilliseconds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BeginInMilliseconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BeginInMilliseconds);
      }
      if (EndInMilliseconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndInMilliseconds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeMessage other) {
      if (other == null) {
        return;
      }
      if (other.BeginInMilliseconds != 0L) {
        BeginInMilliseconds = other.BeginInMilliseconds;
      }
      if (other.EndInMilliseconds != 0L) {
        EndInMilliseconds = other.EndInMilliseconds;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeginInMilliseconds = input.ReadInt64();
            break;
          }
          case 16: {
            EndInMilliseconds = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockLimit : pb::IMessage<BlockLimit> {
    private static readonly pb::MessageParser<BlockLimit> _parser = new pb::MessageParser<BlockLimit>(() => new BlockLimit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ApiReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockLimit(BlockLimit other) : this() {
      startNum_ = other.startNum_;
      endNum_ = other.endNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockLimit Clone() {
      return new BlockLimit(this);
    }

    /// <summary>Field number for the "startNum" field.</summary>
    public const int StartNumFieldNumber = 1;
    private long startNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartNum {
      get { return startNum_; }
      set {
        startNum_ = value;
      }
    }

    /// <summary>Field number for the "endNum" field.</summary>
    public const int EndNumFieldNumber = 2;
    private long endNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndNum {
      get { return endNum_; }
      set {
        endNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartNum != other.StartNum) return false;
      if (EndNum != other.EndNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartNum != 0L) hash ^= StartNum.GetHashCode();
      if (EndNum != 0L) hash ^= EndNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartNum != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StartNum);
      }
      if (EndNum != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EndNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartNum);
      }
      if (EndNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockLimit other) {
      if (other == null) {
        return;
      }
      if (other.StartNum != 0L) {
        StartNum = other.StartNum;
      }
      if (other.EndNum != 0L) {
        EndNum = other.EndNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StartNum = input.ReadInt64();
            break;
          }
          case 16: {
            EndNum = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionLimit : pb::IMessage<TransactionLimit> {
    private static readonly pb::MessageParser<TransactionLimit> _parser = new pb::MessageParser<TransactionLimit>(() => new TransactionLimit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.ApiReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionLimit(TransactionLimit other) : this() {
      transactionId_ = other.transactionId_;
      limitNum_ = other.limitNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionLimit Clone() {
      return new TransactionLimit(this);
    }

    /// <summary>Field number for the "transactionId" field.</summary>
    public const int TransactionIdFieldNumber = 1;
    private pb::ByteString transactionId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limitNum" field.</summary>
    public const int LimitNumFieldNumber = 2;
    private long limitNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LimitNum {
      get { return limitNum_; }
      set {
        limitNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionId != other.TransactionId) return false;
      if (LimitNum != other.LimitNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionId.Length != 0) hash ^= TransactionId.GetHashCode();
      if (LimitNum != 0L) hash ^= LimitNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TransactionId);
      }
      if (LimitNum != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LimitNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransactionId);
      }
      if (LimitNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LimitNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionLimit other) {
      if (other == null) {
        return;
      }
      if (other.TransactionId.Length != 0) {
        TransactionId = other.TransactionId;
      }
      if (other.LimitNum != 0L) {
        LimitNum = other.LimitNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TransactionId = input.ReadBytes();
            break;
          }
          case 16: {
            LimitNum = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
